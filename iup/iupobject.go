// Copyright (C) 2011-2012 visualfc. All rights reserved.
// Use of this source code is governed by a MIT license 
// that can be found in the COPYRIGHT file.

// gencb.lua
// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT

package iup

/*
#include <stdlib.h>
#include <iup.h>
#define GOIUP "_GOIUP_"

// IUP definitions not defined
#define IUP_UNMAP_CB        "UNMAP_CB"
#define IUP_DESTROY_CB      "DESTROY_CB"
#define IUP_CARET_CB        "CARET_CB"
#define IUP_DBLCLICK_CB     "DBLCLICK_CB"
#define IUP_EDIT_CB         "EDIT_CB"
#define IUP_MULTISELECT_CB  "MULTISELECT_CB"
#define IUP_VALUECHANGED_CB "VALUECHANGED_CB"
#define IUP_TABCHANGE_CB    "TABCHANGE_CB"
#define IUP_TABCHANGEPOS_CB "TABCHANGEPOS_CB"
#define IUP_SPIN_CB         "SPIN_CB"
#define IUP_FILE_CB			"FILE_CB"
#define IUP_FOCUS_CB		"FOCUS_CB"
#define IUP_TOUCH_CB		"TOUCH_CB"
#define IUP_MULTITOUCH_CB	"MULTITOUCH_CB"
#define IUP_DROPDOWN_CB		"DROPDOWN_CB"
#define IUP_MULTISELECTION_CB "MULTISELECTION_CB"
#define IUP_SHOWRENAME_CB	"SHOWRENAME_CB"
#define IUP_RENAME_CB		"RENAME_CB"
#define IUP_DRAGDROP_CB		"DRAGDROP_CB"
#define IUP_NODEREMOVED_CB	"NODEREMOVED_CB"
#define IUP_BUTTON_PRESS_CB	"BUTTON_PRESS_CB"
#define IUP_BUTTON_RELEASE_CB "BUTTON_RELEASE_CB"
#define IUP_ACTION_CB		"ACTION_CB"
#define IUP_RELEASE_CB		"RELEASE_CB"
#define IUP_SCROLLTOP_CB	"SCROLLTOP_CB"
#define IUP_BGCOLOR_CB		"BGCOLOR_CB"
#define IUP_FGCOLOR_CB		"FGCOLOR_CB"
#define IUP_FONT_CB			"FONT_CB"
#define IUP_MARK_CB			"MARK_CB"
#define IUP_MARKEDIT_CB		"MARKEDIT_CB"
#define IUP_DELETE_CB		"DELETE_CB"
#define IUP_DELETEBEGIN_CB	"DELETEBEGIN_CB"
#define IUP_DELETEEND_CB	"DELETEEND_CB"
#define IUP_SELECTBEGIN_CB	"SELECTBEGIN_CB"
#define IUP_SELECTEND_CB	"SELECTEND_CB"
#define IUP_EDITBEGIN_CB	"EDITBEGIN_CB"
#define	IUP_EDITEND_CB		"EDITEND_CB"
#define IUP_PREDRAW_CB		"PREDRAW_CB"
#define IUP_POSTDRAW_CB		"POSTDRAW_CB"
#define IUP_COMPLETED_CB	"COMPLETED_CB"
#define IUP_ERROR_CB		"ERROR_CB"
#define IUP_NAVIGATE_CB		"NAVIGATE_CB"
#define IUP_NEWWINDOW_CB	"NEWWINDOW_CB"

extern int goCommonDefaultAction(void*);
static void iupSetCommonDefaultAction(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DEFAULT_ACTION,(Icallback)&goCommonDefaultAction);
}

extern int goCommonMap(void*);
static void iupSetCommonMap(Ihandle* ih)
{
	IupSetCallback(ih,IUP_MAP_CB,(Icallback)&goCommonMap);
}

extern int goCommonUnmap(void*);
static void iupSetCommonUnmap(Ihandle* ih)
{
	IupSetCallback(ih,IUP_UNMAP_CB,(Icallback)&goCommonUnmap);
}

extern int goCommonDestroy(void*);
static void iupSetCommonDestroy(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DESTROY_CB,(Icallback)&goCommonDestroy);
}

extern int goCommonGetFocus(void*);
static void iupSetCommonGetFocus(Ihandle* ih)
{
	IupSetCallback(ih,IUP_GETFOCUS_CB,(Icallback)&goCommonGetFocus);
}

extern int goCommonKillFocus(void*);
static void iupSetCommonKillFocus(Ihandle* ih)
{
	IupSetCallback(ih,IUP_KILLFOCUS_CB,(Icallback)&goCommonKillFocus);
}

extern int goCommonEnterWindow(void*);
static void iupSetCommonEnterWindow(Ihandle* ih)
{
	IupSetCallback(ih,IUP_ENTERWINDOW_CB,(Icallback)&goCommonEnterWindow);
}

extern int goCommonLeaveWindow(void*);
static void iupSetCommonLeaveWindow(Ihandle* ih)
{
	IupSetCallback(ih,IUP_LEAVEWINDOW_CB,(Icallback)&goCommonLeaveWindow);
}

extern int goCommonHelp(void*);
static void iupSetCommonHelp(Ihandle* ih)
{
	IupSetCallback(ih,IUP_HELP_CB,(Icallback)&goCommonHelp);
}

extern int goCommonKeyAny(void*,int);
static void iupSetCommonKeyAny(Ihandle* ih)
{
	IupSetCallback(ih,IUP_K_ANY,(Icallback)&goCommonKeyAny);
}

extern int goDialogClose(void*);
static void iupSetDialogClose(Ihandle* ih)
{
	IupSetCallback(ih,IUP_CLOSE_CB,(Icallback)&goDialogClose);
}

extern int goDialogResize(void*,int,int);
static void iupSetDialogResize(Ihandle* ih)
{
	IupSetCallback(ih,IUP_RESIZE_CB,(Icallback)&goDialogResize);
}

extern int goDialogDropFiles(void*,char*,int,int,int);
static void iupSetDialogDropFiles(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DROPFILES_CB,(Icallback)&goDialogDropFiles);
}

extern int goDialogShow(void*,int);
static void iupSetDialogShow(Ihandle* ih)
{
	IupSetCallback(ih,IUP_SHOW_CB,(Icallback)&goDialogShow);
}

extern int goFileDlgFile(void*,char*,char*);
static void iupSetFileDlgFile(Ihandle* ih)
{
	IupSetCallback(ih,IUP_FILE_CB,(Icallback)&goFileDlgFile);
}

extern int goItemAction(void*);
static void iupSetItemAction(Ihandle* ih)
{
	IupSetCallback(ih,IUP_ACTION,(Icallback)&goItemAction);
}

extern int goItemHighlight(void*);
static void iupSetItemHighlight(Ihandle* ih)
{
	IupSetCallback(ih,IUP_HIGHLIGHT_CB,(Icallback)&goItemHighlight);
}

extern int goMenuOpen(void*);
static void iupSetMenuOpen(Ihandle* ih)
{
	IupSetCallback(ih,IUP_OPEN_CB,(Icallback)&goMenuOpen);
}

extern int goMenuClose(void*);
static void iupSetMenuClose(Ihandle* ih)
{
	IupSetCallback(ih,IUP_MENUCLOSE_CB,(Icallback)&goMenuClose);
}

extern int goSubMenuHighlight(void*);
static void iupSetSubMenuHighlight(Ihandle* ih)
{
	IupSetCallback(ih,IUP_HIGHLIGHT_CB,(Icallback)&goSubMenuHighlight);
}

extern int goTimerAction(void*);
static void iupSetTimerAction(Ihandle* ih)
{
	IupSetCallback(ih,IUP_ACTION,(Icallback)&goTimerAction);
}

extern int goButtonAction(void*);
static void iupSetButtonAction(Ihandle* ih)
{
	IupSetCallback(ih,IUP_ACTION,(Icallback)&goButtonAction);
}

extern int goMouseButton(void*,int,int,int,int,char*);
static void iupSetMouseButton(Ihandle* ih)
{
	IupSetCallback(ih,IUP_BUTTON_CB,(Icallback)&goMouseButton);
}

extern int goCanvasAction(void*);
static void iupSetCanvasAction(Ihandle* ih)
{
	IupSetCallback(ih,IUP_ACTION,(Icallback)&goCanvasAction);
}

extern int goCanvasDropFiles(void*,char*,int,int,int);
static void iupSetCanvasDropFiles(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DROPFILES_CB,(Icallback)&goCanvasDropFiles);
}

extern int goCanvasFocus(void*,int);
static void iupSetCanvasFocus(Ihandle* ih)
{
	IupSetCallback(ih,IUP_FOCUS_CB,(Icallback)&goCanvasFocus);
}

extern int goMouseMotion(void*,int,int,char*);
static void iupSetMouseMotion(Ihandle* ih)
{
	IupSetCallback(ih,IUP_MOTION_CB,(Icallback)&goMouseMotion);
}

extern int goCanvasKeyPress(void*,int,int);
static void iupSetCanvasKeyPress(Ihandle* ih)
{
	IupSetCallback(ih,IUP_KEYPRESS_CB,(Icallback)&goCanvasKeyPress);
}

extern int goCanvasResize(void*,int,int);
static void iupSetCanvasResize(Ihandle* ih)
{
	IupSetCallback(ih,IUP_RESIZE_CB,(Icallback)&goCanvasResize);
}

extern int goCanvasScroll(void*,int,float,float);
static void iupSetCanvasScroll(Ihandle* ih)
{
	IupSetCallback(ih,IUP_SCROLL_CB,(Icallback)&goCanvasScroll);
}

extern int goTouchEvent(void*,int,int,char*);
static void iupSetTouchEvent(Ihandle* ih)
{
	IupSetCallback(ih,IUP_TOUCH_CB,(Icallback)&goTouchEvent);
}

extern int goMultiTouchEvent(void*,int,int*,int*,int*,int*);
static void iupSetMultiTouchEvent(Ihandle* ih)
{
	IupSetCallback(ih,IUP_MULTITOUCH_CB,(Icallback)&goMultiTouchEvent);
}

extern int goCanvasWheel(void*,float,int,int,char*);
static void iupSetCanvasWheel(Ihandle* ih)
{
	IupSetCallback(ih,IUP_WHEEL_CB,(Icallback)&goCanvasWheel);
}

extern int goCanvasWom(void*,int);
static void iupSetCanvasWom(Ihandle* ih)
{
	IupSetCallback(ih,IUP_WOM_CB,(Icallback)&goCanvasWom);
}

extern int goLabelDropFiles(void*,char*,int,int,int);
static void iupSetLabelDropFiles(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DROPFILES_CB,(Icallback)&goLabelDropFiles);
}

extern int goListAction(void*,char*,int,int);
static void iupSetListAction(Ihandle* ih)
{
	IupSetCallback(ih,IUP_ACTION,(Icallback)&goListAction);
}

extern int goListCaret(void*,int,int,int);
static void iupSetListCaret(Ihandle* ih)
{
	IupSetCallback(ih,IUP_CARET_CB,(Icallback)&goListCaret);
}

extern int goListDblclick(void*,int,char*);
static void iupSetListDblclick(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DBLCLICK_CB,(Icallback)&goListDblclick);
}

extern int goListDropDown(void*,int);
static void iupSetListDropDown(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DROPDOWN_CB,(Icallback)&goListDropDown);
}

extern int goListDropFiles(void*,char*,int,int,int);
static void iupSetListDropFiles(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DROPFILES_CB,(Icallback)&goListDropFiles);
}

extern int goListEdit(void*,int,char*);
static void iupSetListEdit(Ihandle* ih)
{
	IupSetCallback(ih,IUP_EDIT_CB,(Icallback)&goListEdit);
}

extern int goListMultiSelect(void*,char*);
static void iupSetListMultiSelect(Ihandle* ih)
{
	IupSetCallback(ih,IUP_MULTISELECT_CB,(Icallback)&goListMultiSelect);
}

extern int goValueChanged(void*);
static void iupSetValueChanged(Ihandle* ih)
{
	IupSetCallback(ih,IUP_VALUECHANGED_CB,(Icallback)&goValueChanged);
}

extern int goSpinInc(void*,int);
static void iupSetSpinInc(Ihandle* ih)
{
	IupSetCallback(ih,IUP_SPIN_CB,(Icallback)&goSpinInc);
}

extern int goSpinBoxInc(void*,int);
static void iupSetSpinBoxInc(Ihandle* ih)
{
	IupSetCallback(ih,IUP_SPIN_CB,(Icallback)&goSpinBoxInc);
}

extern int goTabsChange(void*,void*,void*);
static void iupSetTabsChange(Ihandle* ih)
{
	IupSetCallback(ih,IUP_TABCHANGE_CB,(Icallback)&goTabsChange);
}

extern int goTabsChangePos(void*,int,int);
static void iupSetTabsChangePos(Ihandle* ih)
{
	IupSetCallback(ih,IUP_TABCHANGEPOS_CB,(Icallback)&goTabsChangePos);
}

extern int goTextAction(void*,int,char*);
static void iupSetTextAction(Ihandle* ih)
{
	IupSetCallback(ih,IUP_ACTION,(Icallback)&goTextAction);
}

extern int goTextCaret(void*,int,int,int);
static void iupSetTextCaret(Ihandle* ih)
{
	IupSetCallback(ih,IUP_CARET_CB,(Icallback)&goTextCaret);
}

extern int goTextDropFiles(void*,char*,int,int,int);
static void iupSetTextDropFiles(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DROPFILES_CB,(Icallback)&goTextDropFiles);
}

extern int goTextSpin(void*,int);
static void iupSetTextSpin(Ihandle* ih)
{
	IupSetCallback(ih,IUP_SPIN_CB,(Icallback)&goTextSpin);
}

extern int goToggleAction(void*,int);
static void iupSetToggleAction(Ihandle* ih)
{
	IupSetCallback(ih,IUP_ACTION,(Icallback)&goToggleAction);
}

extern int goTreeSelection(void*,int,int);
static void iupSetTreeSelection(Ihandle* ih)
{
	IupSetCallback(ih,IUP_SELECTION_CB,(Icallback)&goTreeSelection);
}

extern int goTreeMultiSelection(void*,int*,int);
static void iupSetTreeMultiSelection(Ihandle* ih)
{
	IupSetCallback(ih,IUP_MULTISELECTION_CB,(Icallback)&goTreeMultiSelection);
}

extern int goTreeBranchOpen(void*,int);
static void iupSetTreeBranchOpen(Ihandle* ih)
{
	IupSetCallback(ih,IUP_BRANCHOPEN_CB,(Icallback)&goTreeBranchOpen);
}

extern int goTreeBranchClose(void*,int);
static void iupSetTreeBranchClose(Ihandle* ih)
{
	IupSetCallback(ih,IUP_BRANCHCLOSE_CB,(Icallback)&goTreeBranchClose);
}

extern int goTreeExecuteLeaf(void*,int);
static void iupSetTreeExecuteLeaf(Ihandle* ih)
{
	IupSetCallback(ih,IUP_EXECUTELEAF_CB,(Icallback)&goTreeExecuteLeaf);
}

extern int goTreeShowRename(void*,int);
static void iupSetTreeShowRename(Ihandle* ih)
{
	IupSetCallback(ih,IUP_SHOWRENAME_CB,(Icallback)&goTreeShowRename);
}

extern int goTreeRename(void*,int,char*);
static void iupSetTreeRename(Ihandle* ih)
{
	IupSetCallback(ih,IUP_RENAME_CB,(Icallback)&goTreeRename);
}

extern int goTreeDragDrop(void*,int,int,int,int);
static void iupSetTreeDragDrop(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DRAGDROP_CB,(Icallback)&goTreeDragDrop);
}

extern int goTreeNodeRemoved(void*,void*);
static void iupSetTreeNodeRemoved(Ihandle* ih)
{
	IupSetCallback(ih,IUP_NODEREMOVED_CB,(Icallback)&goTreeNodeRemoved);
}

extern int goTreeRightClick(void*,int);
static void iupSetTreeRightClick(Ihandle* ih)
{
	IupSetCallback(ih,IUP_RIGHTCLICK_CB,(Icallback)&goTreeRightClick);
}

extern int goTreeDropFiles(void*,char*,int,int,int);
static void iupSetTreeDropFiles(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DROPFILES_CB,(Icallback)&goTreeDropFiles);
}

extern int goCellsDraw(void*,int,int,int,int,int,int,void*);
static void iupSetCellsDraw(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DRAW_CB,(Icallback)&goCellsDraw);
}

extern int goCellsHeight(void*,int);
static void iupSetCellsHeight(Ihandle* ih)
{
	IupSetCallback(ih,IUP_HEIGHT_CB,(Icallback)&goCellsHeight);
}

extern int goCellsHspan(void*,int,int);
static void iupSetCellsHspan(Ihandle* ih)
{
	IupSetCallback(ih,IUP_HSPAN_CB,(Icallback)&goCellsHspan);
}

extern int goCellsMouseClick(void*,int,int,int,int,int,int,char*);
static void iupSetCellsMouseClick(Ihandle* ih)
{
	IupSetCallback(ih,IUP_MOUSECLICK_CB,(Icallback)&goCellsMouseClick);
}

extern int goCellsMouseMotion(void*,int,int,int,int,char*);
static void iupSetCellsMouseMotion(Ihandle* ih)
{
	IupSetCallback(ih,IUP_MOUSEMOTION_CB,(Icallback)&goCellsMouseMotion);
}

extern int goCellsNcols(void*);
static void iupSetCellsNcols(Ihandle* ih)
{
	IupSetCallback(ih,IUP_NCOLS_CB,(Icallback)&goCellsNcols);
}

extern int goCellsNlines(void*);
static void iupSetCellsNlines(Ihandle* ih)
{
	IupSetCallback(ih,IUP_NLINES_CB,(Icallback)&goCellsNlines);
}

extern int goCellsScrolling(void*,int,int);
static void iupSetCellsScrolling(Ihandle* ih)
{
	IupSetCallback(ih,IUP_SCROLLING_CB,(Icallback)&goCellsScrolling);
}

extern int goCellsVspan(void*,int,int);
static void iupSetCellsVspan(Ihandle* ih)
{
	IupSetCallback(ih,IUP_VSPAN_CB,(Icallback)&goCellsVspan);
}

extern int goCellsWidth(void*,int);
static void iupSetCellsWidth(Ihandle* ih)
{
	IupSetCallback(ih,IUP_WIDTH_CB,(Icallback)&goCellsWidth);
}

extern char* goColorbarCell(void*,int);
static void iupSetColorbarCell(Ihandle* ih)
{
	IupSetCallback(ih,IUP_CELL_CB,(Icallback)&goColorbarCell);
}

extern int goColorbarExtended(void*,int);
static void iupSetColorbarExtended(Ihandle* ih)
{
	IupSetCallback(ih,IUP_EXTENDED_CB,(Icallback)&goColorbarExtended);
}

extern int goColorbarSelect(void*,int,int);
static void iupSetColorbarSelect(Ihandle* ih)
{
	IupSetCallback(ih,IUP_SELECT_CB,(Icallback)&goColorbarSelect);
}

extern int goColorbarSwitch(void*,int,int);
static void iupSetColorbarSwitch(Ihandle* ih)
{
	IupSetCallback(ih,IUP_SWITCH_CB,(Icallback)&goColorbarSwitch);
}

extern int goColorBrowserChange(void*,unsigned char,unsigned char,unsigned char);
static void iupSetColorBrowserChange(Ihandle* ih)
{
	IupSetCallback(ih,IUP_CHANGE_CB,(Icallback)&goColorBrowserChange);
}

extern int goColorBrowserDrag(void*,unsigned char,unsigned char,unsigned char);
static void iupSetColorBrowserDrag(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DRAG_CB,(Icallback)&goColorBrowserDrag);
}

extern int goDialButtonPress(void*,double);
static void iupSetDialButtonPress(Ihandle* ih)
{
	IupSetCallback(ih,IUP_BUTTON_PRESS_CB,(Icallback)&goDialButtonPress);
}

extern int goDialButtonRelease(void*,double);
static void iupSetDialButtonRelease(Ihandle* ih)
{
	IupSetCallback(ih,IUP_BUTTON_RELEASE_CB,(Icallback)&goDialButtonRelease);
}

extern int goDialMouseMove(void*,double);
static void iupSetDialMouseMove(Ihandle* ih)
{
	IupSetCallback(ih,IUP_MOUSEMOVE_CB,(Icallback)&goDialMouseMove);
}

extern int goMatrixAction(void*,int,int,int,int,char*);
static void iupSetMatrixAction(Ihandle* ih)
{
	IupSetCallback(ih,IUP_ACTION_CB,(Icallback)&goMatrixAction);
}

extern int goMatrixClick(void*,int,int,char*);
static void iupSetMatrixClick(Ihandle* ih)
{
	IupSetCallback(ih,IUP_CLICK_CB,(Icallback)&goMatrixClick);
}

extern int goMatrixRelease(void*,int,int,char*);
static void iupSetMatrixRelease(Ihandle* ih)
{
	IupSetCallback(ih,IUP_RELEASE_CB,(Icallback)&goMatrixRelease);
}

extern int goMatrixMouseMove(void*,int,int);
static void iupSetMatrixMouseMove(Ihandle* ih)
{
	IupSetCallback(ih,IUP_MOUSEMOVE_CB,(Icallback)&goMatrixMouseMove);
}

extern int goMatrixEnterItem(void*,int,int);
static void iupSetMatrixEnterItem(Ihandle* ih)
{
	IupSetCallback(ih,IUP_ENTERITEM_CB,(Icallback)&goMatrixEnterItem);
}

extern int goMatrixLeaveItem(void*,int,int);
static void iupSetMatrixLeaveItem(Ihandle* ih)
{
	IupSetCallback(ih,IUP_LEAVEITEM_CB,(Icallback)&goMatrixLeaveItem);
}

extern int goMatrixScrollTop(void*,int,int);
static void iupSetMatrixScrollTop(Ihandle* ih)
{
	IupSetCallback(ih,IUP_SCROLLTOP_CB,(Icallback)&goMatrixScrollTop);
}

extern int goMatrixBgcolor(void*,int,int,unsigned int*,unsigned int*,unsigned int*);
static void iupSetMatrixBgcolor(Ihandle* ih)
{
	IupSetCallback(ih,IUP_BGCOLOR_CB,(Icallback)&goMatrixBgcolor);
}

extern int goMatrixFgcolor(void*,int,int,unsigned int*,unsigned int*,unsigned int*);
static void iupSetMatrixFgcolor(Ihandle* ih)
{
	IupSetCallback(ih,IUP_FGCOLOR_CB,(Icallback)&goMatrixFgcolor);
}

extern int goMatrixFont(void*,int,int);
static void iupSetMatrixFont(Ihandle* ih)
{
	IupSetCallback(ih,IUP_FONT_CB,(Icallback)&goMatrixFont);
}

extern int goMatrixDraw(void*,int,int,int,int,int,int,void*);
static void iupSetMatrixDraw(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DRAW_CB,(Icallback)&goMatrixDraw);
}

extern int goMatrixDropCheck(void*,int,int);
static void iupSetMatrixDropCheck(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DROPCHECK_CB,(Icallback)&goMatrixDropCheck);
}

extern int goMatrixDrop(void*,int,int);
static void iupSetMatrixDrop(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DROP_CB,(Icallback)&goMatrixDrop);
}

extern int goMatrixDropSelect(void*,int,int,void*,char*,int,int);
static void iupSetMatrixDropSelect(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DROPSELECT_CB,(Icallback)&goMatrixDropSelect);
}

extern int goMatrixEdition(void*,int,int,int,int);
static void iupSetMatrixEdition(Ihandle* ih)
{
	IupSetCallback(ih,IUP_EDITION_CB,(Icallback)&goMatrixEdition);
}

extern int goMatrixValue(void*,int,int);
static void iupSetMatrixValue(Ihandle* ih)
{
	IupSetCallback(ih,IUP_VALUE_CB,(Icallback)&goMatrixValue);
}

extern int goMatrixValueEdit(void*,int,int,char*);
static void iupSetMatrixValueEdit(Ihandle* ih)
{
	IupSetCallback(ih,IUP_VALUE_EDIT_CB,(Icallback)&goMatrixValueEdit);
}

extern int goMatrixMark(void*,int,int);
static void iupSetMatrixMark(Ihandle* ih)
{
	IupSetCallback(ih,IUP_MARK_CB,(Icallback)&goMatrixMark);
}

extern int goMatrixMarkEdit(void*,int,int,int);
static void iupSetMatrixMarkEdit(Ihandle* ih)
{
	IupSetCallback(ih,IUP_MARKEDIT_CB,(Icallback)&goMatrixMarkEdit);
}

extern int goPPlotDelete(void*,int,int,float,float);
static void iupSetPPlotDelete(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DELETE_CB,(Icallback)&goPPlotDelete);
}

extern int goPPlotDeleteBegin(void*);
static void iupSetPPlotDeleteBegin(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DELETEBEGIN_CB,(Icallback)&goPPlotDeleteBegin);
}

extern int goPPlotDeleteEnd(void*);
static void iupSetPPlotDeleteEnd(Ihandle* ih)
{
	IupSetCallback(ih,IUP_DELETEEND_CB,(Icallback)&goPPlotDeleteEnd);
}

extern int goPPlotSelect(void*,int,int,float,float,int);
static void iupSetPPlotSelect(Ihandle* ih)
{
	IupSetCallback(ih,IUP_SELECT_CB,(Icallback)&goPPlotSelect);
}

extern int goPPlotSelectBegin(void*);
static void iupSetPPlotSelectBegin(Ihandle* ih)
{
	IupSetCallback(ih,IUP_SELECTBEGIN_CB,(Icallback)&goPPlotSelectBegin);
}

extern int goPPlotSelectEnd(void*);
static void iupSetPPlotSelectEnd(Ihandle* ih)
{
	IupSetCallback(ih,IUP_SELECTEND_CB,(Icallback)&goPPlotSelectEnd);
}

extern int goPPlotEdit(void*,int,int,float,float,float*,float*);
static void iupSetPPlotEdit(Ihandle* ih)
{
	IupSetCallback(ih,IUP_EDIT_CB,(Icallback)&goPPlotEdit);
}

extern int goPPlotEditBegin(void*);
static void iupSetPPlotEditBegin(Ihandle* ih)
{
	IupSetCallback(ih,IUP_EDITBEGIN_CB,(Icallback)&goPPlotEditBegin);
}

extern int goPPlotEditEnd(void*);
static void iupSetPPlotEditEnd(Ihandle* ih)
{
	IupSetCallback(ih,IUP_EDITEND_CB,(Icallback)&goPPlotEditEnd);
}

extern int goPPlotPreDraw(void*,void*);
static void iupSetPPlotPreDraw(Ihandle* ih)
{
	IupSetCallback(ih,IUP_PREDRAW_CB,(Icallback)&goPPlotPreDraw);
}

extern int goPPlotPostDraw(void*,void*);
static void iupSetPPlotPostDraw(Ihandle* ih)
{
	IupSetCallback(ih,IUP_POSTDRAW_CB,(Icallback)&goPPlotPostDraw);
}

extern int goWebBrowserCompleted(void*,char*);
static void iupSetWebBrowserCompleted(Ihandle* ih)
{
	IupSetCallback(ih,IUP_COMPLETED_CB,(Icallback)&goWebBrowserCompleted);
}

extern int goWebBrowserError(void*,char*);
static void iupSetWebBrowserError(Ihandle* ih)
{
	IupSetCallback(ih,IUP_ERROR_CB,(Icallback)&goWebBrowserError);
}

extern int goWebBrowserNavigate(void*,char*);
static void iupSetWebBrowserNavigate(Ihandle* ih)
{
	IupSetCallback(ih,IUP_NAVIGATE_CB,(Icallback)&goWebBrowserNavigate);
}

extern int goWebBrowserNewWindow(void*,char*);
static void iupSetWebBrowserNewWindow(Ihandle* ih)
{
	IupSetCallback(ih,IUP_NEWWINDOW_CB,(Icallback)&goWebBrowserNewWindow);
}

*/
import "C"
import (
	"unsafe"
)

const (
	DIALOG       = "dialog"
	FILEDLG      = "filedlg"
	MESSAGEDLG   = "messagedlg"
	COLORDLG     = "colordlg"
	FONTDLG      = "fontdlg"
	FILL         = "fill"
	HBOX         = "hbox"
	VBOX         = "vbox"
	ZBOX         = "zbox"
	RADIO        = "radio"
	NORMALIZER   = "normalizer"
	CBOX         = "cbox"
	SBOX         = "sbox"
	SCROLLBOX    = "scrollbox"
	BACKGROUNDBOX= "backgroundbox"
	SPLIT        = "split"
	ITEM         = "item"
	MENU         = "menu"
	SEPARATOR    = "separator"
	SUBMENU      = "submenu"
	CLIPBOARD    = "clipboard"
	TIMER        = "timer"
	USER         = "user"
	BUTTON       = "button"
	CANVAS       = "canvas"
	FRAME        = "frame"
	LABEL        = "label"
	LIST         = "list"
	PROGRESSBAR  = "progressbar"
	SPIN         = "spin"
	SPINBOX      = "spinbox"
	TABS         = "tabs"
	TEXT         = "text"
	TOGGLE       = "toggle"
	TREE         = "tree"
	VAL          = "val"
	CELLS        = "cells"
	COLORBAR     = "colorbar"
	COLORBROWSER = "colorbrowser"
	DIAL         = "dial"
	MATRIX       = "matrix"
	OLECONTROL   = "olecontrol"
	PPLOT        = "pplot"
	WEBBROWSER   = "webbrowser"
	TUIOCLIENT   = "tuioclient"
)

func RegisterAllClass() {
	RegisterClass("dialog", NewClassInfo("dialog", dialog_SetCallback))
	RegisterClass("filedlg", NewClassInfo("filedlg", filedlg_SetCallback))
	RegisterClass("messagedlg", NewClassInfo("messagedlg", messagedlg_SetCallback))
	RegisterClass("colordlg", NewClassInfo("colordlg", colordlg_SetCallback))
	RegisterClass("fontdlg", NewClassInfo("fontdlg", fontdlg_SetCallback))
	RegisterClass("fill", NewClassInfo("fill", fill_SetCallback))
	RegisterClass("hbox", NewClassInfo("hbox", hbox_SetCallback))
	RegisterClass("vbox", NewClassInfo("vbox", vbox_SetCallback))
	RegisterClass("zbox", NewClassInfo("zbox", zbox_SetCallback))
	RegisterClass("radio", NewClassInfo("radio", radio_SetCallback))
	RegisterClass("normalizer", NewClassInfo("normalizer", normalizer_SetCallback))
	RegisterClass("cbox", NewClassInfo("cbox", cbox_SetCallback))
	RegisterClass("sbox", NewClassInfo("sbox", sbox_SetCallback))
	RegisterClass("scrollbox", NewClassInfo("scrollbox", scrollbox_SetCallback))
	RegisterClass("backgroundbox", NewClassInfo("backgroundbox", backgroundbox_SetCallback))
	RegisterClass("split", NewClassInfo("split", split_SetCallback))
	RegisterClass("item", NewClassInfo("item", item_SetCallback))
	RegisterClass("menu", NewClassInfo("menu", menu_SetCallback))
	RegisterClass("separator", NewClassInfo("separator", separator_SetCallback))
	RegisterClass("submenu", NewClassInfo("submenu", submenu_SetCallback))
	RegisterClass("clipboard", NewClassInfo("clipboard", clipboard_SetCallback))
	RegisterClass("timer", NewClassInfo("timer", timer_SetCallback))
	RegisterClass("user", NewClassInfo("user", user_SetCallback))
	RegisterClass("button", NewClassInfo("button", button_SetCallback))
	RegisterClass("canvas", NewClassInfo("canvas", canvas_SetCallback))
	RegisterClass("frame", NewClassInfo("frame", frame_SetCallback))
	RegisterClass("label", NewClassInfo("label", label_SetCallback))
	RegisterClass("list", NewClassInfo("list", list_SetCallback))
	RegisterClass("progressbar", NewClassInfo("progressbar", progressbar_SetCallback))
	RegisterClass("spin", NewClassInfo("spin", spin_SetCallback))
	RegisterClass("spinbox", NewClassInfo("spinbox", spinbox_SetCallback))
	RegisterClass("tabs", NewClassInfo("tabs", tabs_SetCallback))
	RegisterClass("text", NewClassInfo("text", text_SetCallback))
	RegisterClass("toggle", NewClassInfo("toggle", toggle_SetCallback))
	RegisterClass("tree", NewClassInfo("tree", tree_SetCallback))
	RegisterClass("val", NewClassInfo("val", val_SetCallback))
	RegisterClass("cells", NewClassInfo("cells", cells_SetCallback))
	RegisterClass("colorbar", NewClassInfo("colorbar", colorbar_SetCallback))
	RegisterClass("colorbrowser", NewClassInfo("colorbrowser", colorbrowser_SetCallback))
	RegisterClass("dial", NewClassInfo("dial", dial_SetCallback))
	RegisterClass("matrix", NewClassInfo("matrix", matrix_SetCallback))
	RegisterClass("olecontrol", NewClassInfo("olecontrol", olecontrol_SetCallback))
	RegisterClass("pplot", NewClassInfo("pplot", pplot_SetCallback))
	RegisterClass("webbrowser", NewClassInfo("webbrowser", webbrowser_SetCallback))
	RegisterClass("tuioclient", NewClassInfo("tuioclient", tuioclient_SetCallback))
}

// Iup control Dialog
//
// Callback CLOSE_CB : func(arg *DialogClose)
//
// Callback RESIZE_CB : func(arg *DialogResize)
//
// Callback DROPFILES_CB : func(arg *DialogDropFiles)
//
// Callback SHOW_CB : func(arg *DialogShow)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Dialog(a ...interface{}) *Handle {
	return New(DIALOG, a...)
}

// Iup control FileDlg
//
// Callback FILE_CB : func(arg *FileDlgFile)
//
// Callback HELP_CB : func(arg *CommonHelp)
func FileDlg(a ...interface{}) *Handle {
	return New(FILEDLG, a...)
}

// Iup control MessageDlg
//
// Callback HELP_CB : func(arg *CommonHelp)
func MessageDlg(a ...interface{}) *Handle {
	return New(MESSAGEDLG, a...)
}

// Iup control ColorDlg
//
// Callback HELP_CB : func(arg *CommonHelp)
func ColorDlg(a ...interface{}) *Handle {
	return New(COLORDLG, a...)
}

// Iup control FontDlg
//
// Callback HELP_CB : func(arg *CommonHelp)
func FontDlg(a ...interface{}) *Handle {
	return New(FONTDLG, a...)
}

// Iup control Fill
//
// 
func Fill(a ...interface{}) *Handle {
	return New(FILL, a...)
}

// Iup control Hbox
//
// 
func Hbox(a ...interface{}) *Handle {
	return New(HBOX, a...)
}

// Iup control Vbox
//
// 
func Vbox(a ...interface{}) *Handle {
	return New(VBOX, a...)
}

// Iup control Zbox
//
// 
func Zbox(a ...interface{}) *Handle {
	return New(ZBOX, a...)
}

// Iup control Radio
//
// 
func Radio(a ...interface{}) *Handle {
	return New(RADIO, a...)
}

// Iup control Normalizer
//
// 
func Normalizer(a ...interface{}) *Handle {
	return New(NORMALIZER, a...)
}

// Iup control Cbox
//
// 
func Cbox(a ...interface{}) *Handle {
	return New(CBOX, a...)
}

// Iup control Sbox
//
// 
func Sbox(a ...interface{}) *Handle {
	return New(SBOX, a...)
}

// Iup control ScrollBox
//
// 
func ScrollBox(a ...interface{}) *Handle {
	return New(SCROLLBOX, a...)
}

// Iup control BackgroundBox
//
// 
func BackgroundBox(a ...interface{}) *Handle {
	return New(BACKGROUNDBOX, a...)
}

// Iup control Split
//
// 
func Split(a ...interface{}) *Handle {
	return New(SPLIT, a...)
}

// Iup control Item
//
// Callback ACTION : func(arg *ItemAction)
//
// Callback HIGHLIGHT_CB : func(arg *ItemHighlight)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback HELP_CB : func(arg *CommonHelp)
func Item(a ...interface{}) *Handle {
	return New(ITEM, a...)
}

// Iup control Menu
//
// Callback OPEN_CB : func(arg *MenuOpen)
//
// Callback MENUCLOSE_CB : func(arg *MenuClose)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
func Menu(a ...interface{}) *Handle {
	return New(MENU, a...)
}

// Iup control Separator
//
// 
func Separator(a ...interface{}) *Handle {
	return New(SEPARATOR, a...)
}

// Iup control SubMenu
//
// Callback HIGHLIGHT_CB : func(arg *SubMenuHighlight)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
func SubMenu(a ...interface{}) *Handle {
	return New(SUBMENU, a...)
}

// Iup control Clipboard
//
// 
func Clipboard(a ...interface{}) *Handle {
	return New(CLIPBOARD, a...)
}

// Iup control Timer
//
// Callback ACTION : func(arg *TimerAction)
func Timer(a ...interface{}) *Handle {
	return New(TIMER, a...)
}

// Iup control User
//
// 
func User(a ...interface{}) *Handle {
	return New(USER, a...)
}

// Iup control Button
//
// Callback ACTION : func(arg *ButtonAction)
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Button(a ...interface{}) *Handle {
	return New(BUTTON, a...)
}

// Iup control Canvas
//
// Callback ACTION : func(arg *CanvasAction)
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback DROPFILES_CB : func(arg *CanvasDropFiles)
//
// Callback FOCUS_CB : func(arg *CanvasFocus)
//
// Callback MOTION_CB : func(arg *MouseMotion)
//
// Callback KEYPRESS_CB : func(arg *CanvasKeyPress)
//
// Callback RESIZE_CB : func(arg *CanvasResize)
//
// Callback SCROLL_CB : func(arg *CanvasScroll)
//
// Callback TOUCH_CB : func(arg *TouchEvent)
//
// Callback MULTITOUCH_CB : func(arg *MultiTouchEvent)
//
// Callback WHEEL_CB : func(arg *CanvasWheel)
//
// Callback WOM_CB : func(arg *CanvasWom)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Canvas(a ...interface{}) *Handle {
	return New(CANVAS, a...)
}

// Iup control Frame
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
func Frame(a ...interface{}) *Handle {
	return New(FRAME, a...)
}

// Iup control Label
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback DROPFILES_CB : func(arg *LabelDropFiles)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
func Label(a ...interface{}) *Handle {
	return New(LABEL, a...)
}

// Iup control List
//
// Callback ACTION : func(arg *ListAction)
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback CARET_CB : func(arg *ListCaret)
//
// Callback DBLCLICK_CB : func(arg *ListDblclick)
//
// Callback DROPDOWN_CB : func(arg *ListDropDown)
//
// Callback DROPFILES_CB : func(arg *ListDropFiles)
//
// Callback EDIT_CB : func(arg *ListEdit)
//
// Callback MOTION_CB : func(arg *MouseMotion)
//
// Callback MULTISELECT_CB : func(arg *ListMultiSelect)
//
// Callback VALUECHANGED_CB : func(arg *ValueChanged)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func List(a ...interface{}) *Handle {
	return New(LIST, a...)
}

// Iup control ProgressBar
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
func ProgressBar(a ...interface{}) *Handle {
	return New(PROGRESSBAR, a...)
}

// Iup control Spin
//
// Callback SPIN_CB : func(arg *SpinInc)
func Spin(a ...interface{}) *Handle {
	return New(SPIN, a...)
}

// Iup control SpinBox
//
// Callback SPIN_CB : func(arg *SpinBoxInc)
func SpinBox(a ...interface{}) *Handle {
	return New(SPINBOX, a...)
}

// Iup control Tabs
//
// Callback TABCHANGE_CB : func(arg *TabsChange)
//
// Callback TABCHANGEPOS_CB : func(arg *TabsChangePos)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Tabs(a ...interface{}) *Handle {
	return New(TABS, a...)
}

// Iup control Text
//
// Callback ACTION : func(arg *TextAction)
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback CARET_CB : func(arg *TextCaret)
//
// Callback DROPFILES_CB : func(arg *TextDropFiles)
//
// Callback MOTION_CB : func(arg *MouseMotion)
//
// Callback SPIN_CB : func(arg *TextSpin)
//
// Callback VALUECHANGED_CB : func(arg *ValueChanged)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Text(a ...interface{}) *Handle {
	return New(TEXT, a...)
}

// Iup control Toggle
//
// Callback ACTION : func(arg *ToggleAction)
//
// Callback VALUECHANGED_CB : func(arg *ValueChanged)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Toggle(a ...interface{}) *Handle {
	return New(TOGGLE, a...)
}

// Iup control Tree
//
// Callback SELECTION_CB : func(arg *TreeSelection)
//
// Callback MULTISELECTION_CB : func(arg *TreeMultiSelection)
//
// Callback BRANCHOPEN_CB : func(arg *TreeBranchOpen)
//
// Callback BRANCHCLOSE_CB : func(arg *TreeBranchClose)
//
// Callback EXECUTELEAF_CB : func(arg *TreeExecuteLeaf)
//
// Callback SHOWRENAME_CB : func(arg *TreeShowRename)
//
// Callback RENAME_CB : func(arg *TreeRename)
//
// Callback DRAGDROP_CB : func(arg *TreeDragDrop)
//
// Callback NODEREMOVED_CB : func(arg *TreeNodeRemoved)
//
// Callback RIGHTCLICK_CB : func(arg *TreeRightClick)
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback DROPFILES_CB : func(arg *TreeDropFiles)
//
// Callback MOTION_CB : func(arg *MouseMotion)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Tree(a ...interface{}) *Handle {
	return New(TREE, a...)
}

// Iup control Val
//
// Callback VALUECHANGED_CB : func(arg *ValueChanged)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Val(a ...interface{}) *Handle {
	return New(VAL, a...)
}

// Iup control Cells
//
// Callback DRAW_CB : func(arg *CellsDraw)
//
// Callback HEIGHT_CB : func(arg *CellsHeight)
//
// Callback HSPAN_CB : func(arg *CellsHspan)
//
// Callback MOUSECLICK_CB : func(arg *CellsMouseClick)
//
// Callback MOUSEMOTION_CB : func(arg *CellsMouseMotion)
//
// Callback NCOLS_CB : func(arg *CellsNcols)
//
// Callback NLINES_CB : func(arg *CellsNlines)
//
// Callback SCROLLING_CB : func(arg *CellsScrolling)
//
// Callback VSPAN_CB : func(arg *CellsVspan)
//
// Callback WIDTH_CB : func(arg *CellsWidth)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Cells(a ...interface{}) *Handle {
	return New(CELLS, a...)
}

// Iup control Colorbar
//
// Callback CELL_CB : func(arg *ColorbarCell)
//
// Callback EXTENDED_CB : func(arg *ColorbarExtended)
//
// Callback SELECT_CB : func(arg *ColorbarSelect)
//
// Callback SWITCH_CB : func(arg *ColorbarSwitch)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Colorbar(a ...interface{}) *Handle {
	return New(COLORBAR, a...)
}

// Iup control ColorBrowser
//
// Callback CHANGE_CB : func(arg *ColorBrowserChange)
//
// Callback DRAG_CB : func(arg *ColorBrowserDrag)
//
// Callback VALUECHANGED_CB : func(arg *ValueChanged)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func ColorBrowser(a ...interface{}) *Handle {
	return New(COLORBROWSER, a...)
}

// Iup control Dial
//
// Callback BUTTON_PRESS_CB : func(arg *DialButtonPress)
//
// Callback BUTTON_RELEASE_CB : func(arg *DialButtonRelease)
//
// Callback MOUSEMOVE_CB : func(arg *DialMouseMove)
//
// Callback VALUECHANGED_CB : func(arg *ValueChanged)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func Dial(a ...interface{}) *Handle {
	return New(DIAL, a...)
}

// Iup control Matrix
//
// Callback ACTION_CB : func(arg *MatrixAction)
//
// Callback CLICK_CB : func(arg *MatrixClick)
//
// Callback RELEASE_CB : func(arg *MatrixRelease)
//
// Callback MOUSEMOVE_CB : func(arg *MatrixMouseMove)
//
// Callback ENTERITEM_CB : func(arg *MatrixEnterItem)
//
// Callback LEAVEITEM_CB : func(arg *MatrixLeaveItem)
//
// Callback SCROLLTOP_CB : func(arg *MatrixScrollTop)
//
// Callback BGCOLOR_CB : func(arg *MatrixBgcolor)
//
// Callback FGCOLOR_CB : func(arg *MatrixFgcolor)
//
// Callback FONT_CB : func(arg *MatrixFont)
//
// Callback DRAW_CB : func(arg *MatrixDraw)
//
// Callback DROPCHECK_CB : func(arg *MatrixDropCheck)
//
// Callback DROP_CB : func(arg *MatrixDrop)
//
// Callback DROPSELECT_CB : func(arg *MatrixDropSelect)
//
// Callback EDITION_CB : func(arg *MatrixEdition)
//
// Callback VALUE_CB : func(arg *MatrixValue)
//
// Callback VALUE_EDIT_CB : func(arg *MatrixValueEdit)
//
// Callback MARK_CB : func(arg *MatrixMark)
//
// Callback MARKEDIT_CB : func(arg *MatrixMarkEdit)
//
// Callback ACTION : func(arg *CanvasAction)
//
// Callback SCROLL_CB : func(arg *CanvasScroll)
//
// Callback KEYPRESS_CB : func(arg *CanvasKeyPress)
//
// Callback MOTION_CB : func(arg *MouseMotion)
//
// Callback RESIZE_CB : func(arg *CanvasResize)
//
// Callback BUTTON_CB : func(arg *MouseButton)
//
// Callback MAP_CB : func(arg *CommonMap)
func Matrix(a ...interface{}) *Handle {
	return New(MATRIX, a...)
}

// Iup control OleControl
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
func OleControl(a ...interface{}) *Handle {
	return New(OLECONTROL, a...)
}

// Iup control PPlot
//
// Callback DELETE_CB : func(arg *PPlotDelete)
//
// Callback DELETEBEGIN_CB : func(arg *PPlotDeleteBegin)
//
// Callback DELETEEND_CB : func(arg *PPlotDeleteEnd)
//
// Callback SELECT_CB : func(arg *PPlotSelect)
//
// Callback SELECTBEGIN_CB : func(arg *PPlotSelectBegin)
//
// Callback SELECTEND_CB : func(arg *PPlotSelectEnd)
//
// Callback EDIT_CB : func(arg *PPlotEdit)
//
// Callback EDITBEGIN_CB : func(arg *PPlotEditBegin)
//
// Callback EDITEND_CB : func(arg *PPlotEditEnd)
//
// Callback PREDRAW_CB : func(arg *PPlotPreDraw)
//
// Callback POSTDRAW_CB : func(arg *PPlotPostDraw)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func PPlot(a ...interface{}) *Handle {
	return New(PPLOT, a...)
}

// Iup control WebBrowser
//
// Callback COMPLETED_CB : func(arg *WebBrowserCompleted)
//
// Callback ERROR_CB : func(arg *WebBrowserError)
//
// Callback NAVIGATE_CB : func(arg *WebBrowserNavigate)
//
// Callback NEWWINDOW_CB : func(arg *WebBrowserNewWindow)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func WebBrowser(a ...interface{}) *Handle {
	return New(WEBBROWSER, a...)
}

// Iup control TuioClient
//
// Callback TOUCH_CB : func(arg *TouchEvent)
//
// Callback MULTITOUCH_CB : func(arg *MultiTouchEvent)
//
// Callback DEFAULT_ACTION : func(arg *CommonDefaultAction)
//
// Callback MAP_CB : func(arg *CommonMap)
//
// Callback UNMAP_CB : func(arg *CommonUnmap)
//
// Callback DESTROY_CB : func(arg *CommonDestroy)
//
// Callback GETFOCUS_CB : func(arg *CommonGetFocus)
//
// Callback KILLFOCUS_CB : func(arg *CommonKillFocus)
//
// Callback ENTERWINDOW_CB : func(arg *CommonEnterWindow)
//
// Callback LEAVEWINDOW_CB : func(arg *CommonLeaveWindow)
//
// Callback HELP_CB : func(arg *CommonHelp)
//
// Callback K_ANY : func(arg *CommonKeyAny)
func TuioClient(a ...interface{}) *Handle {
	return New(TUIOCLIENT, a...)
}

// Iup callback IUP_DEFAULT_ACTION
type CommonDefaultAction struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_MAP_CB
type CommonMap struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_UNMAP_CB
type CommonUnmap struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_DESTROY_CB
type CommonDestroy struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_GETFOCUS_CB
type CommonGetFocus struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_KILLFOCUS_CB
type CommonKillFocus struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_ENTERWINDOW_CB
type CommonEnterWindow struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_LEAVEWINDOW_CB
type CommonLeaveWindow struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_HELP_CB
type CommonHelp struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_K_ANY
type CommonKeyAny struct {
	Sender *Handle
	Return int32
	Key    int32
}

// Iup callback IUP_CLOSE_CB
type DialogClose struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_RESIZE_CB
type DialogResize struct {
	Sender *Handle
	Return int32
	Width  int32
	Height int32
}

// Iup callback IUP_DROPFILES_CB
type DialogDropFiles struct {
	Sender   *Handle
	Return   int32
	FileName string
	Num      int32
	X        int32
	Y        int32
}

// Iup callback IUP_SHOW_CB
type DialogShow struct {
	Sender *Handle
	Return int32
	State  int32
}

// Iup callback IUP_FILE_CB
type FileDlgFile struct {
	Sender   *Handle
	Return   int32
	FileName string
	Status   string
}

// Iup callback IUP_ACTION
type ItemAction struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_HIGHLIGHT_CB
type ItemHighlight struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_OPEN_CB
type MenuOpen struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_MENUCLOSE_CB
type MenuClose struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_HIGHLIGHT_CB
type SubMenuHighlight struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_ACTION
type TimerAction struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_ACTION
type ButtonAction struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_BUTTON_CB
type MouseButton struct {
	Sender  *Handle
	Return  int32
	Button  int32
	Pressed int32
	X       int32
	Y       int32
	Status  string
}

// Iup callback IUP_ACTION
type CanvasAction struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_DROPFILES_CB
type CanvasDropFiles struct {
	Sender   *Handle
	Return   int32
	FileName string
	Num      int32
	X        int32
	Y        int32
}

// Iup callback IUP_FOCUS_CB
type CanvasFocus struct {
	Sender *Handle
	Return int32
	Focus  int32
}

// Iup callback IUP_MOTION_CB
type MouseMotion struct {
	Sender *Handle
	Return int32
	X      int32
	Y      int32
	Status string
}

// Iup callback IUP_KEYPRESS_CB
type CanvasKeyPress struct {
	Sender *Handle
	Return int32
	C      int32
	Press  int32
}

// Iup callback IUP_RESIZE_CB
type CanvasResize struct {
	Sender *Handle
	Return int32
	Width  int32
	Height int32
}

// Iup callback IUP_SCROLL_CB
type CanvasScroll struct {
	Sender *Handle
	Return int32
	Op     int32
	PosX   float32
	PosY   float32
}

// Iup callback IUP_TOUCH_CB
type TouchEvent struct {
	Sender *Handle
	Return int32
	X      int32
	Y      int32
	State  string
}

// Iup callback IUP_MULTITOUCH_CB
type MultiTouchEvent struct {
	Sender *Handle
	Return int32
	Count  int32
	Pid    *int32
	Px     *int32
	Py     *int32
	PState *int32
}

// Iup callback IUP_WHEEL_CB
type CanvasWheel struct {
	Sender *Handle
	Return int32
	Delta  float32
	X      int32
	Y      int32
	Status string
}

// Iup callback IUP_WOM_CB
type CanvasWom struct {
	Sender *Handle
	Return int32
	State  int32
}

// Iup callback IUP_DROPFILES_CB
type LabelDropFiles struct {
	Sender   *Handle
	Return   int32
	FileName string
	Num      int32
	X        int32
	Y        int32
}

// Iup callback IUP_ACTION
type ListAction struct {
	Sender *Handle
	Return int32
	Text   string
	Item   int32
	State  int32
}

// Iup callback IUP_CARET_CB
type ListCaret struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
	Pos    int32
}

// Iup callback IUP_DBLCLICK_CB
type ListDblclick struct {
	Sender *Handle
	Return int32
	Item   int32
	Text   string
}

// Iup callback IUP_DROPDOWN_CB
type ListDropDown struct {
	Sender *Handle
	Return int32
	State  int32
}

// Iup callback IUP_DROPFILES_CB
type ListDropFiles struct {
	Sender   *Handle
	Return   int32
	FileName string
	Num      int32
	X        int32
	Y        int32
}

// Iup callback IUP_EDIT_CB
type ListEdit struct {
	Sender   *Handle
	Return   int32
	C        int32
	NewValue string
}

// Iup callback IUP_MULTISELECT_CB
type ListMultiSelect struct {
	Sender *Handle
	Return int32
	Value  string
}

// Iup callback IUP_VALUECHANGED_CB
type ValueChanged struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_SPIN_CB
type SpinInc struct {
	Sender *Handle
	Return int32
	Inc    int32
}

// Iup callback IUP_SPIN_CB
type SpinBoxInc struct {
	Sender *Handle
	Return int32
	Inc    int32
}

// Iup callback IUP_TABCHANGE_CB
type TabsChange struct {
	Sender *Handle
	Return int32
	NewTab *Handle
	OldTab *Handle
}

// Iup callback IUP_TABCHANGEPOS_CB
type TabsChangePos struct {
	Sender *Handle
	Return int32
	NewPos int32
	OldPos int32
}

// Iup callback IUP_ACTION
type TextAction struct {
	Sender   *Handle
	Return   int32
	C        int32
	NewValue string
}

// Iup callback IUP_CARET_CB
type TextCaret struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
	Pos    int32
}

// Iup callback IUP_DROPFILES_CB
type TextDropFiles struct {
	Sender   *Handle
	Return   int32
	FileName string
	Num      int32
	X        int32
	Y        int32
}

// Iup callback IUP_SPIN_CB
type TextSpin struct {
	Sender *Handle
	Return int32
	Inc    int32
}

// Iup callback IUP_ACTION
type ToggleAction struct {
	Sender *Handle
	Return int32
	State  int32
}

// Iup callback IUP_SELECTION_CB
type TreeSelection struct {
	Sender *Handle
	Return int32
	Id     int32
	Status int32
}

// Iup callback IUP_MULTISELECTION_CB
type TreeMultiSelection struct {
	Sender *Handle
	Return int32
	Ids    *int32
	N      int32
}

// Iup callback IUP_BRANCHOPEN_CB
type TreeBranchOpen struct {
	Sender *Handle
	Return int32
	Id     int32
}

// Iup callback IUP_BRANCHCLOSE_CB
type TreeBranchClose struct {
	Sender *Handle
	Return int32
	Id     int32
}

// Iup callback IUP_EXECUTELEAF_CB
type TreeExecuteLeaf struct {
	Sender *Handle
	Return int32
	Id     int32
}

// Iup callback IUP_SHOWRENAME_CB
type TreeShowRename struct {
	Sender *Handle
	Return int32
	Id     int32
}

// Iup callback IUP_RENAME_CB
type TreeRename struct {
	Sender *Handle
	Return int32
	Id     int32
	Title  string
}

// Iup callback IUP_DRAGDROP_CB
type TreeDragDrop struct {
	Sender    *Handle
	Return    int32
	DragId    int32
	DropId    int32
	IsShift   int32
	IsControl int32
}

// Iup callback IUP_NODEREMOVED_CB
type TreeNodeRemoved struct {
	Sender   *Handle
	Return   int32
	UserData unsafe.Pointer
}

// Iup callback IUP_RIGHTCLICK_CB
type TreeRightClick struct {
	Sender *Handle
	Return int32
	Id     int32
}

// Iup callback IUP_DROPFILES_CB
type TreeDropFiles struct {
	Sender   *Handle
	Return   int32
	FileName string
	Num      int32
	X        int32
	Y        int32
}

// Iup callback IUP_DRAW_CB
type CellsDraw struct {
	Sender *Handle
	Return int32
	Line   int32
	Column int32
	Xmin   int32
	Xmax   int32
	Ymin   int32
	Ymax   int32
	Cnv    unsafe.Pointer
}

// Iup callback IUP_HEIGHT_CB
type CellsHeight struct {
	Sender *Handle
	Return int32
	Line   int32
}

// Iup callback IUP_HSPAN_CB
type CellsHspan struct {
	Sender *Handle
	Return int32
	Line   int32
	Column int32
}

// Iup callback IUP_MOUSECLICK_CB
type CellsMouseClick struct {
	Sender  *Handle
	Return  int32
	Button  int32
	Pressed int32
	Line    int32
	Column  int32
	X       int32
	Y       int32
	Status  string
}

// Iup callback IUP_MOUSEMOTION_CB
type CellsMouseMotion struct {
	Sender *Handle
	Return int32
	Line   int32
	Column int32
	X      int32
	Y      int32
	R      string
}

// Iup callback IUP_NCOLS_CB
type CellsNcols struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_NLINES_CB
type CellsNlines struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_SCROLLING_CB
type CellsScrolling struct {
	Sender *Handle
	Return int32
	Line   int32
	Column int32
}

// Iup callback IUP_VSPAN_CB
type CellsVspan struct {
	Sender *Handle
	Return int32
	Line   int32
	Column int32
}

// Iup callback IUP_WIDTH_CB
type CellsWidth struct {
	Sender *Handle
	Return int32
	Column int32
}

// Iup callback IUP_CELL_CB
type ColorbarCell struct {
	Sender *Handle
	Return string
	Cell   int32
}

// Iup callback IUP_EXTENDED_CB
type ColorbarExtended struct {
	Sender *Handle
	Return int32
	Cell   int32
}

// Iup callback IUP_SELECT_CB
type ColorbarSelect struct {
	Sender *Handle
	Return int32
	Cell   int32
	Type   int32
}

// Iup callback IUP_SWITCH_CB
type ColorbarSwitch struct {
	Sender   *Handle
	Return   int32
	PrimCell int32
	SecCell  int32
}

// Iup callback IUP_CHANGE_CB
type ColorBrowserChange struct {
	Sender *Handle
	Return int32
	R      byte
	G      byte
	B      byte
}

// Iup callback IUP_DRAG_CB
type ColorBrowserDrag struct {
	Sender *Handle
	Return int32
	R      byte
	G      byte
	B      byte
}

// Iup callback IUP_BUTTON_PRESS_CB
type DialButtonPress struct {
	Sender *Handle
	Return int32
	Angle  float64
}

// Iup callback IUP_BUTTON_RELEASE_CB
type DialButtonRelease struct {
	Sender *Handle
	Return int32
	Angle  float64
}

// Iup callback IUP_MOUSEMOVE_CB
type DialMouseMove struct {
	Sender *Handle
	Return int32
	Angle  float64
}

// Iup callback IUP_ACTION_CB
type MatrixAction struct {
	Sender  *Handle
	Return  int32
	Key     int32
	Lin     int32
	Col     int32
	Edition int32
	Value   string
}

// Iup callback IUP_CLICK_CB
type MatrixClick struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
	Status string
}

// Iup callback IUP_RELEASE_CB
type MatrixRelease struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
	Status string
}

// Iup callback IUP_MOUSEMOVE_CB
type MatrixMouseMove struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
}

// Iup callback IUP_ENTERITEM_CB
type MatrixEnterItem struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
}

// Iup callback IUP_LEAVEITEM_CB
type MatrixLeaveItem struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
}

// Iup callback IUP_SCROLLTOP_CB
type MatrixScrollTop struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
}

// Iup callback IUP_BGCOLOR_CB
type MatrixBgcolor struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
	Red    *uint
	Green  *uint
	Blue   *uint
}

// Iup callback IUP_FGCOLOR_CB
type MatrixFgcolor struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
	Red    *uint
	Green  *uint
	Blue   *uint
}

// Iup callback IUP_FONT_CB
type MatrixFont struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
}

// Iup callback IUP_DRAW_CB
type MatrixDraw struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
	X1     int32
	X2     int32
	Y1     int32
	Y2     int32
	Cnv    unsafe.Pointer
}

// Iup callback IUP_DROPCHECK_CB
type MatrixDropCheck struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
}

// Iup callback IUP_DROP_CB
type MatrixDrop struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
}

// Iup callback IUP_DROPSELECT_CB
type MatrixDropSelect struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
	Drop   *Handle
	T      string
	I      int32
	V      int32
}

// Iup callback IUP_EDITION_CB
type MatrixEdition struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
	Mode   int32
	Update int32
}

// Iup callback IUP_VALUE_CB
type MatrixValue struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
}

// Iup callback IUP_VALUE_EDIT_CB
type MatrixValueEdit struct {
	Sender   *Handle
	Return   int32
	Lin      int32
	Col      int32
	NewValue string
}

// Iup callback IUP_MARK_CB
type MatrixMark struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
}

// Iup callback IUP_MARKEDIT_CB
type MatrixMarkEdit struct {
	Sender *Handle
	Return int32
	Lin    int32
	Col    int32
	Marked int32
}

// Iup callback IUP_DELETE_CB
type PPlotDelete struct {
	Sender      *Handle
	Return      int32
	Index       int32
	SampleIndex int32
	X           float32
	Y           float32
}

// Iup callback IUP_DELETEBEGIN_CB
type PPlotDeleteBegin struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_DELETEEND_CB
type PPlotDeleteEnd struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_SELECT_CB
type PPlotSelect struct {
	Sender      *Handle
	Return      int32
	Index       int32
	SampleIndex int32
	X           float32
	Y           float32
	Select      int32
}

// Iup callback IUP_SELECTBEGIN_CB
type PPlotSelectBegin struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_SELECTEND_CB
type PPlotSelectEnd struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_EDIT_CB
type PPlotEdit struct {
	Sender      *Handle
	Return      int32
	Index       int32
	SampleIndex int32
	X           float32
	Y           float32
	NewX        *float32
	NewY        *float32
}

// Iup callback IUP_EDITBEGIN_CB
type PPlotEditBegin struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_EDITEND_CB
type PPlotEditEnd struct {
	Sender *Handle
	Return int32
}

// Iup callback IUP_PREDRAW_CB
type PPlotPreDraw struct {
	Sender *Handle
	Return int32
	Canvas unsafe.Pointer
}

// Iup callback IUP_POSTDRAW_CB
type PPlotPostDraw struct {
	Sender *Handle
	Return int32
	Canvas unsafe.Pointer
}

// Iup callback IUP_COMPLETED_CB
type WebBrowserCompleted struct {
	Sender *Handle
	Return int32
	Url    string
}

// Iup callback IUP_ERROR_CB
type WebBrowserError struct {
	Sender *Handle
	Return int32
	Url    string
}

// Iup callback IUP_NAVIGATE_CB
type WebBrowserNavigate struct {
	Sender *Handle
	Return int32
	Url    string
}

// Iup callback IUP_NEWWINDOW_CB
type WebBrowserNewWindow struct {
	Sender *Handle
	Return int32
	Url    string
}

func common_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*CommonDefaultAction):
		C.iupSetCommonDefaultAction(h.p)
		h.funcs["CommonDefaultAction"] = fn
	case func(*CommonMap):
		C.iupSetCommonMap(h.p)
		h.funcs["CommonMap"] = fn
	case func(*CommonUnmap):
		C.iupSetCommonUnmap(h.p)
		h.funcs["CommonUnmap"] = fn
	case func(*CommonDestroy):
		C.iupSetCommonDestroy(h.p)
		h.funcs["CommonDestroy"] = fn
	case func(*CommonGetFocus):
		C.iupSetCommonGetFocus(h.p)
		h.funcs["CommonGetFocus"] = fn
	case func(*CommonKillFocus):
		C.iupSetCommonKillFocus(h.p)
		h.funcs["CommonKillFocus"] = fn
	case func(*CommonEnterWindow):
		C.iupSetCommonEnterWindow(h.p)
		h.funcs["CommonEnterWindow"] = fn
	case func(*CommonLeaveWindow):
		C.iupSetCommonLeaveWindow(h.p)
		h.funcs["CommonLeaveWindow"] = fn
	case func(*CommonHelp):
		C.iupSetCommonHelp(h.p)
		h.funcs["CommonHelp"] = fn
	case func(*CommonKeyAny):
		C.iupSetCommonKeyAny(h.p)
		h.funcs["CommonKeyAny"] = fn
	default:
		return false
	}
	return true
}

func dialog_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*DialogClose):
		C.iupSetDialogClose(h.p)
		h.funcs["DialogClose"] = fn
	case func(*DialogResize):
		C.iupSetDialogResize(h.p)
		h.funcs["DialogResize"] = fn
	case func(*DialogDropFiles):
		C.iupSetDialogDropFiles(h.p)
		h.funcs["DialogDropFiles"] = fn
	case func(*DialogShow):
		C.iupSetDialogShow(h.p)
		h.funcs["DialogShow"] = fn
	default:
		return common_SetCallback(h, fn)
	}
	return true
}

func filedlg_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*FileDlgFile):
		C.iupSetFileDlgFile(h.p)
		h.funcs["FileDlgFile"] = fn
	case func(*CommonHelp):
		C.iupSetCommonHelp(h.p)
		h.funcs["CommonHelp"] = fn
	default:
		return false
	}
	return true
}

func messagedlg_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*CommonHelp):
		C.iupSetCommonHelp(h.p)
		h.funcs["CommonHelp"] = fn
	default:
		return false
	}
	return true
}

func colordlg_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*CommonHelp):
		C.iupSetCommonHelp(h.p)
		h.funcs["CommonHelp"] = fn
	default:
		return false
	}
	return true
}

func fontdlg_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*CommonHelp):
		C.iupSetCommonHelp(h.p)
		h.funcs["CommonHelp"] = fn
	default:
		return false
	}
	return true
}

func fill_SetCallback(h *Handle, fn interface{}) bool {
	return false
}

func hbox_SetCallback(h *Handle, fn interface{}) bool {
	return false
}

func vbox_SetCallback(h *Handle, fn interface{}) bool {
	return false
}

func zbox_SetCallback(h *Handle, fn interface{}) bool {
	return false
}

func radio_SetCallback(h *Handle, fn interface{}) bool {
	return false
}

func normalizer_SetCallback(h *Handle, fn interface{}) bool {
	return false
}

func cbox_SetCallback(h *Handle, fn interface{}) bool {
	return false
}

func sbox_SetCallback(h *Handle, fn interface{}) bool {
	return false
}

func scrollbox_SetCallback(h *Handle, fn interface{}) bool {
	return false
}

func backgroundbox_SetCallback(h *Handle, fn interface{}) bool {
	return false
}

func split_SetCallback(h *Handle, fn interface{}) bool {
	return false
}

func item_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*ItemAction):
		C.iupSetItemAction(h.p)
		h.funcs["ItemAction"] = fn
	case func(*ItemHighlight):
		C.iupSetItemHighlight(h.p)
		h.funcs["ItemHighlight"] = fn
	case func(*CommonMap):
		C.iupSetCommonMap(h.p)
		h.funcs["CommonMap"] = fn
	case func(*CommonUnmap):
		C.iupSetCommonUnmap(h.p)
		h.funcs["CommonUnmap"] = fn
	case func(*CommonHelp):
		C.iupSetCommonHelp(h.p)
		h.funcs["CommonHelp"] = fn
	default:
		return false
	}
	return true
}

func menu_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*MenuOpen):
		C.iupSetMenuOpen(h.p)
		h.funcs["MenuOpen"] = fn
	case func(*MenuClose):
		C.iupSetMenuClose(h.p)
		h.funcs["MenuClose"] = fn
	case func(*CommonMap):
		C.iupSetCommonMap(h.p)
		h.funcs["CommonMap"] = fn
	case func(*CommonUnmap):
		C.iupSetCommonUnmap(h.p)
		h.funcs["CommonUnmap"] = fn
	default:
		return false
	}
	return true
}

func separator_SetCallback(h *Handle, fn interface{}) bool {
	return false
}

func submenu_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*SubMenuHighlight):
		C.iupSetSubMenuHighlight(h.p)
		h.funcs["SubMenuHighlight"] = fn
	case func(*CommonMap):
		C.iupSetCommonMap(h.p)
		h.funcs["CommonMap"] = fn
	case func(*CommonUnmap):
		C.iupSetCommonUnmap(h.p)
		h.funcs["CommonUnmap"] = fn
	default:
		return false
	}
	return true
}

func clipboard_SetCallback(h *Handle, fn interface{}) bool {
	return false
}

func timer_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*TimerAction):
		C.iupSetTimerAction(h.p)
		h.funcs["TimerAction"] = fn
	default:
		return false
	}
	return true
}

func user_SetCallback(h *Handle, fn interface{}) bool {
	return false
}

func button_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*ButtonAction):
		C.iupSetButtonAction(h.p)
		h.funcs["ButtonAction"] = fn
	case func(*MouseButton):
		C.iupSetMouseButton(h.p)
		h.funcs["MouseButton"] = fn
	default:
		return common_SetCallback(h, fn)
	}
	return true
}

func canvas_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*CanvasAction):
		C.iupSetCanvasAction(h.p)
		h.funcs["CanvasAction"] = fn
	case func(*MouseButton):
		C.iupSetMouseButton(h.p)
		h.funcs["MouseButton"] = fn
	case func(*CanvasDropFiles):
		C.iupSetCanvasDropFiles(h.p)
		h.funcs["CanvasDropFiles"] = fn
	case func(*CanvasFocus):
		C.iupSetCanvasFocus(h.p)
		h.funcs["CanvasFocus"] = fn
	case func(*MouseMotion):
		C.iupSetMouseMotion(h.p)
		h.funcs["MouseMotion"] = fn
	case func(*CanvasKeyPress):
		C.iupSetCanvasKeyPress(h.p)
		h.funcs["CanvasKeyPress"] = fn
	case func(*CanvasResize):
		C.iupSetCanvasResize(h.p)
		h.funcs["CanvasResize"] = fn
	case func(*CanvasScroll):
		C.iupSetCanvasScroll(h.p)
		h.funcs["CanvasScroll"] = fn
	case func(*TouchEvent):
		C.iupSetTouchEvent(h.p)
		h.funcs["TouchEvent"] = fn
	case func(*MultiTouchEvent):
		C.iupSetMultiTouchEvent(h.p)
		h.funcs["MultiTouchEvent"] = fn
	case func(*CanvasWheel):
		C.iupSetCanvasWheel(h.p)
		h.funcs["CanvasWheel"] = fn
	case func(*CanvasWom):
		C.iupSetCanvasWom(h.p)
		h.funcs["CanvasWom"] = fn
	default:
		return common_SetCallback(h, fn)
	}
	return true
}

func frame_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*CommonMap):
		C.iupSetCommonMap(h.p)
		h.funcs["CommonMap"] = fn
	case func(*CommonUnmap):
		C.iupSetCommonUnmap(h.p)
		h.funcs["CommonUnmap"] = fn
	default:
		return false
	}
	return true
}

func label_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*MouseButton):
		C.iupSetMouseButton(h.p)
		h.funcs["MouseButton"] = fn
	case func(*LabelDropFiles):
		C.iupSetLabelDropFiles(h.p)
		h.funcs["LabelDropFiles"] = fn
	case func(*CommonMap):
		C.iupSetCommonMap(h.p)
		h.funcs["CommonMap"] = fn
	case func(*CommonUnmap):
		C.iupSetCommonUnmap(h.p)
		h.funcs["CommonUnmap"] = fn
	case func(*CommonEnterWindow):
		C.iupSetCommonEnterWindow(h.p)
		h.funcs["CommonEnterWindow"] = fn
	case func(*CommonLeaveWindow):
		C.iupSetCommonLeaveWindow(h.p)
		h.funcs["CommonLeaveWindow"] = fn
	default:
		return false
	}
	return true
}

func list_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*ListAction):
		C.iupSetListAction(h.p)
		h.funcs["ListAction"] = fn
	case func(*MouseButton):
		C.iupSetMouseButton(h.p)
		h.funcs["MouseButton"] = fn
	case func(*ListCaret):
		C.iupSetListCaret(h.p)
		h.funcs["ListCaret"] = fn
	case func(*ListDblclick):
		C.iupSetListDblclick(h.p)
		h.funcs["ListDblclick"] = fn
	case func(*ListDropDown):
		C.iupSetListDropDown(h.p)
		h.funcs["ListDropDown"] = fn
	case func(*ListDropFiles):
		C.iupSetListDropFiles(h.p)
		h.funcs["ListDropFiles"] = fn
	case func(*ListEdit):
		C.iupSetListEdit(h.p)
		h.funcs["ListEdit"] = fn
	case func(*MouseMotion):
		C.iupSetMouseMotion(h.p)
		h.funcs["MouseMotion"] = fn
	case func(*ListMultiSelect):
		C.iupSetListMultiSelect(h.p)
		h.funcs["ListMultiSelect"] = fn
	case func(*ValueChanged):
		C.iupSetValueChanged(h.p)
		h.funcs["ValueChanged"] = fn
	default:
		return common_SetCallback(h, fn)
	}
	return true
}

func progressbar_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*CommonMap):
		C.iupSetCommonMap(h.p)
		h.funcs["CommonMap"] = fn
	case func(*CommonUnmap):
		C.iupSetCommonUnmap(h.p)
		h.funcs["CommonUnmap"] = fn
	default:
		return false
	}
	return true
}

func spin_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*SpinInc):
		C.iupSetSpinInc(h.p)
		h.funcs["SpinInc"] = fn
	default:
		return false
	}
	return true
}

func spinbox_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*SpinBoxInc):
		C.iupSetSpinBoxInc(h.p)
		h.funcs["SpinBoxInc"] = fn
	default:
		return false
	}
	return true
}

func tabs_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*TabsChange):
		C.iupSetTabsChange(h.p)
		h.funcs["TabsChange"] = fn
	case func(*TabsChangePos):
		C.iupSetTabsChangePos(h.p)
		h.funcs["TabsChangePos"] = fn
	default:
		return common_SetCallback(h, fn)
	}
	return true
}

func text_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*TextAction):
		C.iupSetTextAction(h.p)
		h.funcs["TextAction"] = fn
	case func(*MouseButton):
		C.iupSetMouseButton(h.p)
		h.funcs["MouseButton"] = fn
	case func(*TextCaret):
		C.iupSetTextCaret(h.p)
		h.funcs["TextCaret"] = fn
	case func(*TextDropFiles):
		C.iupSetTextDropFiles(h.p)
		h.funcs["TextDropFiles"] = fn
	case func(*MouseMotion):
		C.iupSetMouseMotion(h.p)
		h.funcs["MouseMotion"] = fn
	case func(*TextSpin):
		C.iupSetTextSpin(h.p)
		h.funcs["TextSpin"] = fn
	case func(*ValueChanged):
		C.iupSetValueChanged(h.p)
		h.funcs["ValueChanged"] = fn
	default:
		return common_SetCallback(h, fn)
	}
	return true
}

func toggle_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*ToggleAction):
		C.iupSetToggleAction(h.p)
		h.funcs["ToggleAction"] = fn
	case func(*ValueChanged):
		C.iupSetValueChanged(h.p)
		h.funcs["ValueChanged"] = fn
	default:
		return common_SetCallback(h, fn)
	}
	return true
}

func tree_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*TreeSelection):
		C.iupSetTreeSelection(h.p)
		h.funcs["TreeSelection"] = fn
	case func(*TreeMultiSelection):
		C.iupSetTreeMultiSelection(h.p)
		h.funcs["TreeMultiSelection"] = fn
	case func(*TreeBranchOpen):
		C.iupSetTreeBranchOpen(h.p)
		h.funcs["TreeBranchOpen"] = fn
	case func(*TreeBranchClose):
		C.iupSetTreeBranchClose(h.p)
		h.funcs["TreeBranchClose"] = fn
	case func(*TreeExecuteLeaf):
		C.iupSetTreeExecuteLeaf(h.p)
		h.funcs["TreeExecuteLeaf"] = fn
	case func(*TreeShowRename):
		C.iupSetTreeShowRename(h.p)
		h.funcs["TreeShowRename"] = fn
	case func(*TreeRename):
		C.iupSetTreeRename(h.p)
		h.funcs["TreeRename"] = fn
	case func(*TreeDragDrop):
		C.iupSetTreeDragDrop(h.p)
		h.funcs["TreeDragDrop"] = fn
	case func(*TreeNodeRemoved):
		C.iupSetTreeNodeRemoved(h.p)
		h.funcs["TreeNodeRemoved"] = fn
	case func(*TreeRightClick):
		C.iupSetTreeRightClick(h.p)
		h.funcs["TreeRightClick"] = fn
	case func(*MouseButton):
		C.iupSetMouseButton(h.p)
		h.funcs["MouseButton"] = fn
	case func(*TreeDropFiles):
		C.iupSetTreeDropFiles(h.p)
		h.funcs["TreeDropFiles"] = fn
	case func(*MouseMotion):
		C.iupSetMouseMotion(h.p)
		h.funcs["MouseMotion"] = fn
	default:
		return common_SetCallback(h, fn)
	}
	return true
}

func val_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*ValueChanged):
		C.iupSetValueChanged(h.p)
		h.funcs["ValueChanged"] = fn
	default:
		return common_SetCallback(h, fn)
	}
	return true
}

func cells_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*CellsDraw):
		C.iupSetCellsDraw(h.p)
		h.funcs["CellsDraw"] = fn
	case func(*CellsHeight):
		C.iupSetCellsHeight(h.p)
		h.funcs["CellsHeight"] = fn
	case func(*CellsHspan):
		C.iupSetCellsHspan(h.p)
		h.funcs["CellsHspan"] = fn
	case func(*CellsMouseClick):
		C.iupSetCellsMouseClick(h.p)
		h.funcs["CellsMouseClick"] = fn
	case func(*CellsMouseMotion):
		C.iupSetCellsMouseMotion(h.p)
		h.funcs["CellsMouseMotion"] = fn
	case func(*CellsNcols):
		C.iupSetCellsNcols(h.p)
		h.funcs["CellsNcols"] = fn
	case func(*CellsNlines):
		C.iupSetCellsNlines(h.p)
		h.funcs["CellsNlines"] = fn
	case func(*CellsScrolling):
		C.iupSetCellsScrolling(h.p)
		h.funcs["CellsScrolling"] = fn
	case func(*CellsVspan):
		C.iupSetCellsVspan(h.p)
		h.funcs["CellsVspan"] = fn
	case func(*CellsWidth):
		C.iupSetCellsWidth(h.p)
		h.funcs["CellsWidth"] = fn
	default:
		return common_SetCallback(h, fn)
	}
	return true
}

func colorbar_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*ColorbarCell):
		C.iupSetColorbarCell(h.p)
		h.funcs["ColorbarCell"] = fn
	case func(*ColorbarExtended):
		C.iupSetColorbarExtended(h.p)
		h.funcs["ColorbarExtended"] = fn
	case func(*ColorbarSelect):
		C.iupSetColorbarSelect(h.p)
		h.funcs["ColorbarSelect"] = fn
	case func(*ColorbarSwitch):
		C.iupSetColorbarSwitch(h.p)
		h.funcs["ColorbarSwitch"] = fn
	default:
		return common_SetCallback(h, fn)
	}
	return true
}

func colorbrowser_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*ColorBrowserChange):
		C.iupSetColorBrowserChange(h.p)
		h.funcs["ColorBrowserChange"] = fn
	case func(*ColorBrowserDrag):
		C.iupSetColorBrowserDrag(h.p)
		h.funcs["ColorBrowserDrag"] = fn
	case func(*ValueChanged):
		C.iupSetValueChanged(h.p)
		h.funcs["ValueChanged"] = fn
	default:
		return common_SetCallback(h, fn)
	}
	return true
}

func dial_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*DialButtonPress):
		C.iupSetDialButtonPress(h.p)
		h.funcs["DialButtonPress"] = fn
	case func(*DialButtonRelease):
		C.iupSetDialButtonRelease(h.p)
		h.funcs["DialButtonRelease"] = fn
	case func(*DialMouseMove):
		C.iupSetDialMouseMove(h.p)
		h.funcs["DialMouseMove"] = fn
	case func(*ValueChanged):
		C.iupSetValueChanged(h.p)
		h.funcs["ValueChanged"] = fn
	default:
		return common_SetCallback(h, fn)
	}
	return true
}

func matrix_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*MatrixAction):
		C.iupSetMatrixAction(h.p)
		h.funcs["MatrixAction"] = fn
	case func(*MatrixClick):
		C.iupSetMatrixClick(h.p)
		h.funcs["MatrixClick"] = fn
	case func(*MatrixRelease):
		C.iupSetMatrixRelease(h.p)
		h.funcs["MatrixRelease"] = fn
	case func(*MatrixMouseMove):
		C.iupSetMatrixMouseMove(h.p)
		h.funcs["MatrixMouseMove"] = fn
	case func(*MatrixEnterItem):
		C.iupSetMatrixEnterItem(h.p)
		h.funcs["MatrixEnterItem"] = fn
	case func(*MatrixLeaveItem):
		C.iupSetMatrixLeaveItem(h.p)
		h.funcs["MatrixLeaveItem"] = fn
	case func(*MatrixScrollTop):
		C.iupSetMatrixScrollTop(h.p)
		h.funcs["MatrixScrollTop"] = fn
	case func(*MatrixBgcolor):
		C.iupSetMatrixBgcolor(h.p)
		h.funcs["MatrixBgcolor"] = fn
	case func(*MatrixFgcolor):
		C.iupSetMatrixFgcolor(h.p)
		h.funcs["MatrixFgcolor"] = fn
	case func(*MatrixFont):
		C.iupSetMatrixFont(h.p)
		h.funcs["MatrixFont"] = fn
	case func(*MatrixDraw):
		C.iupSetMatrixDraw(h.p)
		h.funcs["MatrixDraw"] = fn
	case func(*MatrixDropCheck):
		C.iupSetMatrixDropCheck(h.p)
		h.funcs["MatrixDropCheck"] = fn
	case func(*MatrixDrop):
		C.iupSetMatrixDrop(h.p)
		h.funcs["MatrixDrop"] = fn
	case func(*MatrixDropSelect):
		C.iupSetMatrixDropSelect(h.p)
		h.funcs["MatrixDropSelect"] = fn
	case func(*MatrixEdition):
		C.iupSetMatrixEdition(h.p)
		h.funcs["MatrixEdition"] = fn
	case func(*MatrixValue):
		C.iupSetMatrixValue(h.p)
		h.funcs["MatrixValue"] = fn
	case func(*MatrixValueEdit):
		C.iupSetMatrixValueEdit(h.p)
		h.funcs["MatrixValueEdit"] = fn
	case func(*MatrixMark):
		C.iupSetMatrixMark(h.p)
		h.funcs["MatrixMark"] = fn
	case func(*MatrixMarkEdit):
		C.iupSetMatrixMarkEdit(h.p)
		h.funcs["MatrixMarkEdit"] = fn
	case func(*CanvasAction):
		C.iupSetCanvasAction(h.p)
		h.funcs["CanvasAction"] = fn
	case func(*CanvasScroll):
		C.iupSetCanvasScroll(h.p)
		h.funcs["CanvasScroll"] = fn
	case func(*CanvasKeyPress):
		C.iupSetCanvasKeyPress(h.p)
		h.funcs["CanvasKeyPress"] = fn
	case func(*MouseMotion):
		C.iupSetMouseMotion(h.p)
		h.funcs["MouseMotion"] = fn
	case func(*CanvasResize):
		C.iupSetCanvasResize(h.p)
		h.funcs["CanvasResize"] = fn
	case func(*MouseButton):
		C.iupSetMouseButton(h.p)
		h.funcs["MouseButton"] = fn
	case func(*CommonMap):
		C.iupSetCommonMap(h.p)
		h.funcs["CommonMap"] = fn
	default:
		return false
	}
	return true
}

func olecontrol_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*CommonMap):
		C.iupSetCommonMap(h.p)
		h.funcs["CommonMap"] = fn
	case func(*CommonUnmap):
		C.iupSetCommonUnmap(h.p)
		h.funcs["CommonUnmap"] = fn
	case func(*CommonGetFocus):
		C.iupSetCommonGetFocus(h.p)
		h.funcs["CommonGetFocus"] = fn
	case func(*CommonKillFocus):
		C.iupSetCommonKillFocus(h.p)
		h.funcs["CommonKillFocus"] = fn
	case func(*CommonEnterWindow):
		C.iupSetCommonEnterWindow(h.p)
		h.funcs["CommonEnterWindow"] = fn
	case func(*CommonLeaveWindow):
		C.iupSetCommonLeaveWindow(h.p)
		h.funcs["CommonLeaveWindow"] = fn
	default:
		return false
	}
	return true
}

func pplot_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*PPlotDelete):
		C.iupSetPPlotDelete(h.p)
		h.funcs["PPlotDelete"] = fn
	case func(*PPlotDeleteBegin):
		C.iupSetPPlotDeleteBegin(h.p)
		h.funcs["PPlotDeleteBegin"] = fn
	case func(*PPlotDeleteEnd):
		C.iupSetPPlotDeleteEnd(h.p)
		h.funcs["PPlotDeleteEnd"] = fn
	case func(*PPlotSelect):
		C.iupSetPPlotSelect(h.p)
		h.funcs["PPlotSelect"] = fn
	case func(*PPlotSelectBegin):
		C.iupSetPPlotSelectBegin(h.p)
		h.funcs["PPlotSelectBegin"] = fn
	case func(*PPlotSelectEnd):
		C.iupSetPPlotSelectEnd(h.p)
		h.funcs["PPlotSelectEnd"] = fn
	case func(*PPlotEdit):
		C.iupSetPPlotEdit(h.p)
		h.funcs["PPlotEdit"] = fn
	case func(*PPlotEditBegin):
		C.iupSetPPlotEditBegin(h.p)
		h.funcs["PPlotEditBegin"] = fn
	case func(*PPlotEditEnd):
		C.iupSetPPlotEditEnd(h.p)
		h.funcs["PPlotEditEnd"] = fn
	case func(*PPlotPreDraw):
		C.iupSetPPlotPreDraw(h.p)
		h.funcs["PPlotPreDraw"] = fn
	case func(*PPlotPostDraw):
		C.iupSetPPlotPostDraw(h.p)
		h.funcs["PPlotPostDraw"] = fn
	default:
		return common_SetCallback(h, fn)
	}
	return true
}

func webbrowser_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*WebBrowserCompleted):
		C.iupSetWebBrowserCompleted(h.p)
		h.funcs["WebBrowserCompleted"] = fn
	case func(*WebBrowserError):
		C.iupSetWebBrowserError(h.p)
		h.funcs["WebBrowserError"] = fn
	case func(*WebBrowserNavigate):
		C.iupSetWebBrowserNavigate(h.p)
		h.funcs["WebBrowserNavigate"] = fn
	case func(*WebBrowserNewWindow):
		C.iupSetWebBrowserNewWindow(h.p)
		h.funcs["WebBrowserNewWindow"] = fn
	default:
		return common_SetCallback(h, fn)
	}
	return true
}

func tuioclient_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
	case func(*TouchEvent):
		C.iupSetTouchEvent(h.p)
		h.funcs["TouchEvent"] = fn
	case func(*MultiTouchEvent):
		C.iupSetMultiTouchEvent(h.p)
		h.funcs["MultiTouchEvent"] = fn
	default:
		return common_SetCallback(h, fn)
	}
	return true
}

//export goCommonDefaultAction
func goCommonDefaultAction(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CommonDefaultAction"]; ok {
			if fn, ok := f.(func(*CommonDefaultAction)); ok {
				arg := &CommonDefaultAction{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCommonMap
func goCommonMap(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CommonMap"]; ok {
			if fn, ok := f.(func(*CommonMap)); ok {
				arg := &CommonMap{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCommonUnmap
func goCommonUnmap(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CommonUnmap"]; ok {
			if fn, ok := f.(func(*CommonUnmap)); ok {
				arg := &CommonUnmap{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCommonDestroy
func goCommonDestroy(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CommonDestroy"]; ok {
			if fn, ok := f.(func(*CommonDestroy)); ok {
				arg := &CommonDestroy{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCommonGetFocus
func goCommonGetFocus(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CommonGetFocus"]; ok {
			if fn, ok := f.(func(*CommonGetFocus)); ok {
				arg := &CommonGetFocus{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCommonKillFocus
func goCommonKillFocus(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CommonKillFocus"]; ok {
			if fn, ok := f.(func(*CommonKillFocus)); ok {
				arg := &CommonKillFocus{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCommonEnterWindow
func goCommonEnterWindow(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CommonEnterWindow"]; ok {
			if fn, ok := f.(func(*CommonEnterWindow)); ok {
				arg := &CommonEnterWindow{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCommonLeaveWindow
func goCommonLeaveWindow(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CommonLeaveWindow"]; ok {
			if fn, ok := f.(func(*CommonLeaveWindow)); ok {
				arg := &CommonLeaveWindow{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCommonHelp
func goCommonHelp(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CommonHelp"]; ok {
			if fn, ok := f.(func(*CommonHelp)); ok {
				arg := &CommonHelp{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCommonKeyAny
func goCommonKeyAny(p unsafe.Pointer, N1 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CommonKeyAny"]; ok {
			if fn, ok := f.(func(*CommonKeyAny)); ok {
				arg := &CommonKeyAny{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goDialogClose
func goDialogClose(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["DialogClose"]; ok {
			if fn, ok := f.(func(*DialogClose)); ok {
				arg := &DialogClose{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goDialogResize
func goDialogResize(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["DialogResize"]; ok {
			if fn, ok := f.(func(*DialogResize)); ok {
				arg := &DialogResize{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goDialogDropFiles
func goDialogDropFiles(p unsafe.Pointer, N1 *C.char, N2 int32, N3 int32, N4 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["DialogDropFiles"]; ok {
			if fn, ok := f.(func(*DialogDropFiles)); ok {
				arg := &DialogDropFiles{h, DEFAULT, C.GoString(N1), N2, N3, N4}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goDialogShow
func goDialogShow(p unsafe.Pointer, N1 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["DialogShow"]; ok {
			if fn, ok := f.(func(*DialogShow)); ok {
				arg := &DialogShow{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goFileDlgFile
func goFileDlgFile(p unsafe.Pointer, N1 *C.char, N2 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["FileDlgFile"]; ok {
			if fn, ok := f.(func(*FileDlgFile)); ok {
				arg := &FileDlgFile{h, DEFAULT, C.GoString(N1), C.GoString(N2)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goItemAction
func goItemAction(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["ItemAction"]; ok {
			if fn, ok := f.(func(*ItemAction)); ok {
				arg := &ItemAction{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goItemHighlight
func goItemHighlight(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["ItemHighlight"]; ok {
			if fn, ok := f.(func(*ItemHighlight)); ok {
				arg := &ItemHighlight{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMenuOpen
func goMenuOpen(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MenuOpen"]; ok {
			if fn, ok := f.(func(*MenuOpen)); ok {
				arg := &MenuOpen{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMenuClose
func goMenuClose(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MenuClose"]; ok {
			if fn, ok := f.(func(*MenuClose)); ok {
				arg := &MenuClose{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goSubMenuHighlight
func goSubMenuHighlight(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["SubMenuHighlight"]; ok {
			if fn, ok := f.(func(*SubMenuHighlight)); ok {
				arg := &SubMenuHighlight{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTimerAction
func goTimerAction(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TimerAction"]; ok {
			if fn, ok := f.(func(*TimerAction)); ok {
				arg := &TimerAction{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goButtonAction
func goButtonAction(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["ButtonAction"]; ok {
			if fn, ok := f.(func(*ButtonAction)); ok {
				arg := &ButtonAction{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMouseButton
func goMouseButton(p unsafe.Pointer, N1 int32, N2 int32, N3 int32, N4 int32, N5 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MouseButton"]; ok {
			if fn, ok := f.(func(*MouseButton)); ok {
				arg := &MouseButton{h, DEFAULT, N1, N2, N3, N4, C.GoString(N5)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCanvasAction
func goCanvasAction(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CanvasAction"]; ok {
			if fn, ok := f.(func(*CanvasAction)); ok {
				arg := &CanvasAction{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCanvasDropFiles
func goCanvasDropFiles(p unsafe.Pointer, N1 *C.char, N2 int32, N3 int32, N4 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CanvasDropFiles"]; ok {
			if fn, ok := f.(func(*CanvasDropFiles)); ok {
				arg := &CanvasDropFiles{h, DEFAULT, C.GoString(N1), N2, N3, N4}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCanvasFocus
func goCanvasFocus(p unsafe.Pointer, N1 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CanvasFocus"]; ok {
			if fn, ok := f.(func(*CanvasFocus)); ok {
				arg := &CanvasFocus{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMouseMotion
func goMouseMotion(p unsafe.Pointer, N1 int32, N2 int32, N3 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MouseMotion"]; ok {
			if fn, ok := f.(func(*MouseMotion)); ok {
				arg := &MouseMotion{h, DEFAULT, N1, N2, C.GoString(N3)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCanvasKeyPress
func goCanvasKeyPress(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CanvasKeyPress"]; ok {
			if fn, ok := f.(func(*CanvasKeyPress)); ok {
				arg := &CanvasKeyPress{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCanvasResize
func goCanvasResize(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CanvasResize"]; ok {
			if fn, ok := f.(func(*CanvasResize)); ok {
				arg := &CanvasResize{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCanvasScroll
func goCanvasScroll(p unsafe.Pointer, N1 int32, N2 float32, N3 float32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CanvasScroll"]; ok {
			if fn, ok := f.(func(*CanvasScroll)); ok {
				arg := &CanvasScroll{h, DEFAULT, N1, N2, N3}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTouchEvent
func goTouchEvent(p unsafe.Pointer, N1 int32, N2 int32, N3 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TouchEvent"]; ok {
			if fn, ok := f.(func(*TouchEvent)); ok {
				arg := &TouchEvent{h, DEFAULT, N1, N2, C.GoString(N3)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMultiTouchEvent
func goMultiTouchEvent(p unsafe.Pointer, N1 int32, N2 *int32, N3 *int32, N4 *int32, N5 *int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MultiTouchEvent"]; ok {
			if fn, ok := f.(func(*MultiTouchEvent)); ok {
				arg := &MultiTouchEvent{h, DEFAULT, N1, N2, N3, N4, N5}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCanvasWheel
func goCanvasWheel(p unsafe.Pointer, N1 float32, N2 int32, N3 int32, N4 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CanvasWheel"]; ok {
			if fn, ok := f.(func(*CanvasWheel)); ok {
				arg := &CanvasWheel{h, DEFAULT, N1, N2, N3, C.GoString(N4)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCanvasWom
func goCanvasWom(p unsafe.Pointer, N1 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CanvasWom"]; ok {
			if fn, ok := f.(func(*CanvasWom)); ok {
				arg := &CanvasWom{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goLabelDropFiles
func goLabelDropFiles(p unsafe.Pointer, N1 *C.char, N2 int32, N3 int32, N4 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["LabelDropFiles"]; ok {
			if fn, ok := f.(func(*LabelDropFiles)); ok {
				arg := &LabelDropFiles{h, DEFAULT, C.GoString(N1), N2, N3, N4}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goListAction
func goListAction(p unsafe.Pointer, N1 *C.char, N2 int32, N3 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["ListAction"]; ok {
			if fn, ok := f.(func(*ListAction)); ok {
				arg := &ListAction{h, DEFAULT, C.GoString(N1), N2, N3}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goListCaret
func goListCaret(p unsafe.Pointer, N1 int32, N2 int32, N3 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["ListCaret"]; ok {
			if fn, ok := f.(func(*ListCaret)); ok {
				arg := &ListCaret{h, DEFAULT, N1, N2, N3}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goListDblclick
func goListDblclick(p unsafe.Pointer, N1 int32, N2 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["ListDblclick"]; ok {
			if fn, ok := f.(func(*ListDblclick)); ok {
				arg := &ListDblclick{h, DEFAULT, N1, C.GoString(N2)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goListDropDown
func goListDropDown(p unsafe.Pointer, N1 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["ListDropDown"]; ok {
			if fn, ok := f.(func(*ListDropDown)); ok {
				arg := &ListDropDown{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goListDropFiles
func goListDropFiles(p unsafe.Pointer, N1 *C.char, N2 int32, N3 int32, N4 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["ListDropFiles"]; ok {
			if fn, ok := f.(func(*ListDropFiles)); ok {
				arg := &ListDropFiles{h, DEFAULT, C.GoString(N1), N2, N3, N4}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goListEdit
func goListEdit(p unsafe.Pointer, N1 int32, N2 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["ListEdit"]; ok {
			if fn, ok := f.(func(*ListEdit)); ok {
				arg := &ListEdit{h, DEFAULT, N1, C.GoString(N2)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goListMultiSelect
func goListMultiSelect(p unsafe.Pointer, N1 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["ListMultiSelect"]; ok {
			if fn, ok := f.(func(*ListMultiSelect)); ok {
				arg := &ListMultiSelect{h, DEFAULT, C.GoString(N1)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goValueChanged
func goValueChanged(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["ValueChanged"]; ok {
			if fn, ok := f.(func(*ValueChanged)); ok {
				arg := &ValueChanged{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goSpinInc
func goSpinInc(p unsafe.Pointer, N1 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["SpinInc"]; ok {
			if fn, ok := f.(func(*SpinInc)); ok {
				arg := &SpinInc{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goSpinBoxInc
func goSpinBoxInc(p unsafe.Pointer, N1 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["SpinBoxInc"]; ok {
			if fn, ok := f.(func(*SpinBoxInc)); ok {
				arg := &SpinBoxInc{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTabsChange
func goTabsChange(p unsafe.Pointer, N1 unsafe.Pointer, N2 unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TabsChange"]; ok {
			if fn, ok := f.(func(*TabsChange)); ok {
				arg := &TabsChange{h, DEFAULT, (*Handle)(N1), (*Handle)(N2)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTabsChangePos
func goTabsChangePos(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TabsChangePos"]; ok {
			if fn, ok := f.(func(*TabsChangePos)); ok {
				arg := &TabsChangePos{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTextAction
func goTextAction(p unsafe.Pointer, N1 int32, N2 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TextAction"]; ok {
			if fn, ok := f.(func(*TextAction)); ok {
				arg := &TextAction{h, DEFAULT, N1, C.GoString(N2)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTextCaret
func goTextCaret(p unsafe.Pointer, N1 int32, N2 int32, N3 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TextCaret"]; ok {
			if fn, ok := f.(func(*TextCaret)); ok {
				arg := &TextCaret{h, DEFAULT, N1, N2, N3}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTextDropFiles
func goTextDropFiles(p unsafe.Pointer, N1 *C.char, N2 int32, N3 int32, N4 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TextDropFiles"]; ok {
			if fn, ok := f.(func(*TextDropFiles)); ok {
				arg := &TextDropFiles{h, DEFAULT, C.GoString(N1), N2, N3, N4}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTextSpin
func goTextSpin(p unsafe.Pointer, N1 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TextSpin"]; ok {
			if fn, ok := f.(func(*TextSpin)); ok {
				arg := &TextSpin{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goToggleAction
func goToggleAction(p unsafe.Pointer, N1 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["ToggleAction"]; ok {
			if fn, ok := f.(func(*ToggleAction)); ok {
				arg := &ToggleAction{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTreeSelection
func goTreeSelection(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TreeSelection"]; ok {
			if fn, ok := f.(func(*TreeSelection)); ok {
				arg := &TreeSelection{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTreeMultiSelection
func goTreeMultiSelection(p unsafe.Pointer, N1 *int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TreeMultiSelection"]; ok {
			if fn, ok := f.(func(*TreeMultiSelection)); ok {
				arg := &TreeMultiSelection{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTreeBranchOpen
func goTreeBranchOpen(p unsafe.Pointer, N1 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TreeBranchOpen"]; ok {
			if fn, ok := f.(func(*TreeBranchOpen)); ok {
				arg := &TreeBranchOpen{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTreeBranchClose
func goTreeBranchClose(p unsafe.Pointer, N1 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TreeBranchClose"]; ok {
			if fn, ok := f.(func(*TreeBranchClose)); ok {
				arg := &TreeBranchClose{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTreeExecuteLeaf
func goTreeExecuteLeaf(p unsafe.Pointer, N1 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TreeExecuteLeaf"]; ok {
			if fn, ok := f.(func(*TreeExecuteLeaf)); ok {
				arg := &TreeExecuteLeaf{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTreeShowRename
func goTreeShowRename(p unsafe.Pointer, N1 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TreeShowRename"]; ok {
			if fn, ok := f.(func(*TreeShowRename)); ok {
				arg := &TreeShowRename{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTreeRename
func goTreeRename(p unsafe.Pointer, N1 int32, N2 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TreeRename"]; ok {
			if fn, ok := f.(func(*TreeRename)); ok {
				arg := &TreeRename{h, DEFAULT, N1, C.GoString(N2)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTreeDragDrop
func goTreeDragDrop(p unsafe.Pointer, N1 int32, N2 int32, N3 int32, N4 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TreeDragDrop"]; ok {
			if fn, ok := f.(func(*TreeDragDrop)); ok {
				arg := &TreeDragDrop{h, DEFAULT, N1, N2, N3, N4}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTreeNodeRemoved
func goTreeNodeRemoved(p unsafe.Pointer, N1 unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TreeNodeRemoved"]; ok {
			if fn, ok := f.(func(*TreeNodeRemoved)); ok {
				arg := &TreeNodeRemoved{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTreeRightClick
func goTreeRightClick(p unsafe.Pointer, N1 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TreeRightClick"]; ok {
			if fn, ok := f.(func(*TreeRightClick)); ok {
				arg := &TreeRightClick{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goTreeDropFiles
func goTreeDropFiles(p unsafe.Pointer, N1 *C.char, N2 int32, N3 int32, N4 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["TreeDropFiles"]; ok {
			if fn, ok := f.(func(*TreeDropFiles)); ok {
				arg := &TreeDropFiles{h, DEFAULT, C.GoString(N1), N2, N3, N4}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCellsDraw
func goCellsDraw(p unsafe.Pointer, N1 int32, N2 int32, N3 int32, N4 int32, N5 int32, N6 int32, N7 unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CellsDraw"]; ok {
			if fn, ok := f.(func(*CellsDraw)); ok {
				arg := &CellsDraw{h, DEFAULT, N1, N2, N3, N4, N5, N6, N7}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCellsHeight
func goCellsHeight(p unsafe.Pointer, N1 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CellsHeight"]; ok {
			if fn, ok := f.(func(*CellsHeight)); ok {
				arg := &CellsHeight{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCellsHspan
func goCellsHspan(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CellsHspan"]; ok {
			if fn, ok := f.(func(*CellsHspan)); ok {
				arg := &CellsHspan{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCellsMouseClick
func goCellsMouseClick(p unsafe.Pointer, N1 int32, N2 int32, N3 int32, N4 int32, N5 int32, N6 int32, N7 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CellsMouseClick"]; ok {
			if fn, ok := f.(func(*CellsMouseClick)); ok {
				arg := &CellsMouseClick{h, DEFAULT, N1, N2, N3, N4, N5, N6, C.GoString(N7)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCellsMouseMotion
func goCellsMouseMotion(p unsafe.Pointer, N1 int32, N2 int32, N3 int32, N4 int32, N5 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CellsMouseMotion"]; ok {
			if fn, ok := f.(func(*CellsMouseMotion)); ok {
				arg := &CellsMouseMotion{h, DEFAULT, N1, N2, N3, N4, C.GoString(N5)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCellsNcols
func goCellsNcols(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CellsNcols"]; ok {
			if fn, ok := f.(func(*CellsNcols)); ok {
				arg := &CellsNcols{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCellsNlines
func goCellsNlines(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CellsNlines"]; ok {
			if fn, ok := f.(func(*CellsNlines)); ok {
				arg := &CellsNlines{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCellsScrolling
func goCellsScrolling(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CellsScrolling"]; ok {
			if fn, ok := f.(func(*CellsScrolling)); ok {
				arg := &CellsScrolling{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCellsVspan
func goCellsVspan(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CellsVspan"]; ok {
			if fn, ok := f.(func(*CellsVspan)); ok {
				arg := &CellsVspan{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goCellsWidth
func goCellsWidth(p unsafe.Pointer, N1 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["CellsWidth"]; ok {
			if fn, ok := f.(func(*CellsWidth)); ok {
				arg := &CellsWidth{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goColorbarCell
func goColorbarCell(p unsafe.Pointer, N1 int32) *C.char {
	ih := ptoHandle(p)
	if ih == nil {
		return nil
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["ColorbarCell"]; ok {
			if fn, ok := f.(func(*ColorbarCell)); ok {
				arg := &ColorbarCell{h, "", N1}
				fn(arg)
				size := len(arg.Return)
				ch := make([]byte, size+1)
				copy(ch, arg.Return)
				ch[size] = 0
				return (*C.char)(unsafe.Pointer(&ch[0]))
			}
		}
	}
	return nil
}

//export goColorbarExtended
func goColorbarExtended(p unsafe.Pointer, N1 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["ColorbarExtended"]; ok {
			if fn, ok := f.(func(*ColorbarExtended)); ok {
				arg := &ColorbarExtended{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goColorbarSelect
func goColorbarSelect(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["ColorbarSelect"]; ok {
			if fn, ok := f.(func(*ColorbarSelect)); ok {
				arg := &ColorbarSelect{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goColorbarSwitch
func goColorbarSwitch(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["ColorbarSwitch"]; ok {
			if fn, ok := f.(func(*ColorbarSwitch)); ok {
				arg := &ColorbarSwitch{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goColorBrowserChange
func goColorBrowserChange(p unsafe.Pointer, N1 C.uchar, N2 C.uchar, N3 C.uchar) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["ColorBrowserChange"]; ok {
			if fn, ok := f.(func(*ColorBrowserChange)); ok {
				arg := &ColorBrowserChange{h, DEFAULT, byte(N1), byte(N2), byte(N3)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goColorBrowserDrag
func goColorBrowserDrag(p unsafe.Pointer, N1 C.uchar, N2 C.uchar, N3 C.uchar) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["ColorBrowserDrag"]; ok {
			if fn, ok := f.(func(*ColorBrowserDrag)); ok {
				arg := &ColorBrowserDrag{h, DEFAULT, byte(N1), byte(N2), byte(N3)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goDialButtonPress
func goDialButtonPress(p unsafe.Pointer, N1 float64) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["DialButtonPress"]; ok {
			if fn, ok := f.(func(*DialButtonPress)); ok {
				arg := &DialButtonPress{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goDialButtonRelease
func goDialButtonRelease(p unsafe.Pointer, N1 float64) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["DialButtonRelease"]; ok {
			if fn, ok := f.(func(*DialButtonRelease)); ok {
				arg := &DialButtonRelease{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goDialMouseMove
func goDialMouseMove(p unsafe.Pointer, N1 float64) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["DialMouseMove"]; ok {
			if fn, ok := f.(func(*DialMouseMove)); ok {
				arg := &DialMouseMove{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixAction
func goMatrixAction(p unsafe.Pointer, N1 int32, N2 int32, N3 int32, N4 int32, N5 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixAction"]; ok {
			if fn, ok := f.(func(*MatrixAction)); ok {
				arg := &MatrixAction{h, DEFAULT, N1, N2, N3, N4, C.GoString(N5)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixClick
func goMatrixClick(p unsafe.Pointer, N1 int32, N2 int32, N3 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixClick"]; ok {
			if fn, ok := f.(func(*MatrixClick)); ok {
				arg := &MatrixClick{h, DEFAULT, N1, N2, C.GoString(N3)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixRelease
func goMatrixRelease(p unsafe.Pointer, N1 int32, N2 int32, N3 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixRelease"]; ok {
			if fn, ok := f.(func(*MatrixRelease)); ok {
				arg := &MatrixRelease{h, DEFAULT, N1, N2, C.GoString(N3)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixMouseMove
func goMatrixMouseMove(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixMouseMove"]; ok {
			if fn, ok := f.(func(*MatrixMouseMove)); ok {
				arg := &MatrixMouseMove{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixEnterItem
func goMatrixEnterItem(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixEnterItem"]; ok {
			if fn, ok := f.(func(*MatrixEnterItem)); ok {
				arg := &MatrixEnterItem{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixLeaveItem
func goMatrixLeaveItem(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixLeaveItem"]; ok {
			if fn, ok := f.(func(*MatrixLeaveItem)); ok {
				arg := &MatrixLeaveItem{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixScrollTop
func goMatrixScrollTop(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixScrollTop"]; ok {
			if fn, ok := f.(func(*MatrixScrollTop)); ok {
				arg := &MatrixScrollTop{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixBgcolor
func goMatrixBgcolor(p unsafe.Pointer, N1 int32, N2 int32, N3 *C.uint, N4 *C.uint, N5 *C.uint) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixBgcolor"]; ok {
			if fn, ok := f.(func(*MatrixBgcolor)); ok {
				arg := &MatrixBgcolor{h, DEFAULT, N1, N2, (*uint)(unsafe.Pointer(N3)), (*uint)(unsafe.Pointer(N4)), (*uint)(unsafe.Pointer(N5))}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixFgcolor
func goMatrixFgcolor(p unsafe.Pointer, N1 int32, N2 int32, N3 *C.uint, N4 *C.uint, N5 *C.uint) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixFgcolor"]; ok {
			if fn, ok := f.(func(*MatrixFgcolor)); ok {
				arg := &MatrixFgcolor{h, DEFAULT, N1, N2, (*uint)(unsafe.Pointer(N3)), (*uint)(unsafe.Pointer(N4)), (*uint)(unsafe.Pointer(N5))}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixFont
func goMatrixFont(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixFont"]; ok {
			if fn, ok := f.(func(*MatrixFont)); ok {
				arg := &MatrixFont{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixDraw
func goMatrixDraw(p unsafe.Pointer, N1 int32, N2 int32, N3 int32, N4 int32, N5 int32, N6 int32, N7 unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixDraw"]; ok {
			if fn, ok := f.(func(*MatrixDraw)); ok {
				arg := &MatrixDraw{h, DEFAULT, N1, N2, N3, N4, N5, N6, N7}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixDropCheck
func goMatrixDropCheck(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixDropCheck"]; ok {
			if fn, ok := f.(func(*MatrixDropCheck)); ok {
				arg := &MatrixDropCheck{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixDrop
func goMatrixDrop(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixDrop"]; ok {
			if fn, ok := f.(func(*MatrixDrop)); ok {
				arg := &MatrixDrop{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixDropSelect
func goMatrixDropSelect(p unsafe.Pointer, N1 int32, N2 int32, N3 unsafe.Pointer, N4 *C.char, N5 int32, N6 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixDropSelect"]; ok {
			if fn, ok := f.(func(*MatrixDropSelect)); ok {
				arg := &MatrixDropSelect{h, DEFAULT, N1, N2, (*Handle)(N3), C.GoString(N4), N5, N6}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixEdition
func goMatrixEdition(p unsafe.Pointer, N1 int32, N2 int32, N3 int32, N4 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixEdition"]; ok {
			if fn, ok := f.(func(*MatrixEdition)); ok {
				arg := &MatrixEdition{h, DEFAULT, N1, N2, N3, N4}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixValue
func goMatrixValue(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixValue"]; ok {
			if fn, ok := f.(func(*MatrixValue)); ok {
				arg := &MatrixValue{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixValueEdit
func goMatrixValueEdit(p unsafe.Pointer, N1 int32, N2 int32, N3 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixValueEdit"]; ok {
			if fn, ok := f.(func(*MatrixValueEdit)); ok {
				arg := &MatrixValueEdit{h, DEFAULT, N1, N2, C.GoString(N3)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixMark
func goMatrixMark(p unsafe.Pointer, N1 int32, N2 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixMark"]; ok {
			if fn, ok := f.(func(*MatrixMark)); ok {
				arg := &MatrixMark{h, DEFAULT, N1, N2}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goMatrixMarkEdit
func goMatrixMarkEdit(p unsafe.Pointer, N1 int32, N2 int32, N3 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["MatrixMarkEdit"]; ok {
			if fn, ok := f.(func(*MatrixMarkEdit)); ok {
				arg := &MatrixMarkEdit{h, DEFAULT, N1, N2, N3}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goPPlotDelete
func goPPlotDelete(p unsafe.Pointer, N1 int32, N2 int32, N3 float32, N4 float32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["PPlotDelete"]; ok {
			if fn, ok := f.(func(*PPlotDelete)); ok {
				arg := &PPlotDelete{h, DEFAULT, N1, N2, N3, N4}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goPPlotDeleteBegin
func goPPlotDeleteBegin(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["PPlotDeleteBegin"]; ok {
			if fn, ok := f.(func(*PPlotDeleteBegin)); ok {
				arg := &PPlotDeleteBegin{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goPPlotDeleteEnd
func goPPlotDeleteEnd(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["PPlotDeleteEnd"]; ok {
			if fn, ok := f.(func(*PPlotDeleteEnd)); ok {
				arg := &PPlotDeleteEnd{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goPPlotSelect
func goPPlotSelect(p unsafe.Pointer, N1 int32, N2 int32, N3 float32, N4 float32, N5 int32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["PPlotSelect"]; ok {
			if fn, ok := f.(func(*PPlotSelect)); ok {
				arg := &PPlotSelect{h, DEFAULT, N1, N2, N3, N4, N5}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goPPlotSelectBegin
func goPPlotSelectBegin(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["PPlotSelectBegin"]; ok {
			if fn, ok := f.(func(*PPlotSelectBegin)); ok {
				arg := &PPlotSelectBegin{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goPPlotSelectEnd
func goPPlotSelectEnd(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["PPlotSelectEnd"]; ok {
			if fn, ok := f.(func(*PPlotSelectEnd)); ok {
				arg := &PPlotSelectEnd{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goPPlotEdit
func goPPlotEdit(p unsafe.Pointer, N1 int32, N2 int32, N3 float32, N4 float32, N5 *float32, N6 *float32) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["PPlotEdit"]; ok {
			if fn, ok := f.(func(*PPlotEdit)); ok {
				arg := &PPlotEdit{h, DEFAULT, N1, N2, N3, N4, N5, N6}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goPPlotEditBegin
func goPPlotEditBegin(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["PPlotEditBegin"]; ok {
			if fn, ok := f.(func(*PPlotEditBegin)); ok {
				arg := &PPlotEditBegin{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goPPlotEditEnd
func goPPlotEditEnd(p unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["PPlotEditEnd"]; ok {
			if fn, ok := f.(func(*PPlotEditEnd)); ok {
				arg := &PPlotEditEnd{h, DEFAULT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goPPlotPreDraw
func goPPlotPreDraw(p unsafe.Pointer, N1 unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["PPlotPreDraw"]; ok {
			if fn, ok := f.(func(*PPlotPreDraw)); ok {
				arg := &PPlotPreDraw{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goPPlotPostDraw
func goPPlotPostDraw(p unsafe.Pointer, N1 unsafe.Pointer) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["PPlotPostDraw"]; ok {
			if fn, ok := f.(func(*PPlotPostDraw)); ok {
				arg := &PPlotPostDraw{h, DEFAULT, N1}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goWebBrowserCompleted
func goWebBrowserCompleted(p unsafe.Pointer, N1 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["WebBrowserCompleted"]; ok {
			if fn, ok := f.(func(*WebBrowserCompleted)); ok {
				arg := &WebBrowserCompleted{h, DEFAULT, C.GoString(N1)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goWebBrowserError
func goWebBrowserError(p unsafe.Pointer, N1 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["WebBrowserError"]; ok {
			if fn, ok := f.(func(*WebBrowserError)); ok {
				arg := &WebBrowserError{h, DEFAULT, C.GoString(N1)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goWebBrowserNavigate
func goWebBrowserNavigate(p unsafe.Pointer, N1 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["WebBrowserNavigate"]; ok {
			if fn, ok := f.(func(*WebBrowserNavigate)); ok {
				arg := &WebBrowserNavigate{h, DEFAULT, C.GoString(N1)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}

//export goWebBrowserNewWindow
func goWebBrowserNewWindow(p unsafe.Pointer, N1 *C.char) int32 {
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h, ok := ih.(*Handle); ok {
		if f, ok := h.funcs["WebBrowserNewWindow"]; ok {
			if fn, ok := f.(func(*WebBrowserNewWindow)); ok {
				arg := &WebBrowserNewWindow{h, DEFAULT, C.GoString(N1)}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}
